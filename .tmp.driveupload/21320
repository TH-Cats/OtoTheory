//
//  AdvancedChordBuilderView.swift
//  OtoTheory
//
//  Phase E-4B: Advanced Chord Builder (Pro)
//

import SwiftUI

struct AdvancedChordBuilderView: View {
    @Binding var showAdvanced: Bool
    @Binding var selectedQuick: String
    @Binding var selectedSlashBass: String?
    let isPro: Bool
    let onShowPaywall: () -> Void
    
    private let roots = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"]
    // Quality Master.csv based categories - only show if user has Pro
    private var proQualities: [(category: String, qualities: [String])] {
        guard isPro else { return [] }
        let proQualitiesData = QualityMaster.getQualitiesByCategory(tier: "Pro")
        var result: [(category: String, qualities: [String])] = []
        
        for (category, qualityInfos) in proQualitiesData {
            let englishCategory = getEnglishCategoryName(category)
            result.append((category: englishCategory, qualities: qualityInfos.map { $0.quality }))
        }
        
        return result
    }
    
    private func getEnglishCategoryName(_ japaneseCategory: String) -> String {
        switch japaneseCategory {
        case "✨ キラキラ・浮遊感": return "✨ Sparkle & Float"
        case "🌃 おしゃれ・都会的": return "🌃 Stylish & Urban"
        case "⚡️ 緊張感・スパイス": return "⚡️ Tension & Spice"
        default: return japaneseCategory
        }
    }
    
    var body: some View {
        DisclosureGroup(
            isExpanded: $showAdvanced,
            content: {
                VStack(spacing: 16) {
                    if isPro {
                        // Show Pro qualities from Quality Master.csv
                        ForEach(proQualities, id: \.category) { categoryData in
                            chordCategory(title: categoryData.category, chords: categoryData.qualities)
                            
                            // Add Slash (On) section after Stylish & Urban category
                            if categoryData.category == "🌃 Stylish & Urban" {
                                VStack(alignment: .leading, spacing: 8) {
                                    Text("Slash (On)")
                                        .font(.subheadline)
                                        .fontWeight(.semibold)
                                        .foregroundColor(.secondary)
                                    
                                    ScrollView(.horizontal, showsIndicators: false) {
                                        HStack(spacing: 8) {
                                            // Clear button
                                            Button(action: {
                                                selectedSlashBass = nil
                                            }) {
                                                Text("Clear")
                                                    .font(.caption)
                                                    .fontWeight(.semibold)
                                                    .frame(minWidth: 50)
                                                    .padding(.vertical, 10)
                                                    .background(selectedSlashBass == nil ? Color.orange : Color.gray.opacity(0.15))
                                                    .foregroundColor(selectedSlashBass == nil ? .white : .primary)
                                                    .cornerRadius(6)
                                            }
                                            
                                            ForEach(roots, id: \.self) { bass in
                                                Button(action: {
                                                    selectedSlashBass = bass
                                                }) {
                                                    Text(bass)
                                                        .font(.caption)
                                                        .fontWeight(.semibold)
                                                        .frame(minWidth: 40)
                                                        .padding(.vertical, 10)
                                                        .background(selectedSlashBass == bass ? Color.blue : Color.gray.opacity(0.15))
                                                        .foregroundColor(selectedSlashBass == bass ? .white : .primary)
                                                        .cornerRadius(6)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    } else {
                        // Show Pro paywall message
                        VStack(spacing: 12) {
                            Text("Pro features locked")
                                .font(.headline)
                                .foregroundColor(.secondary)
                            
                            Button(action: onShowPaywall) {
                                Text("Upgrade to Pro")
                                    .font(.subheadline)
                                    .fontWeight(.semibold)
                                    .foregroundColor(.white)
                                    .padding(.horizontal, 20)
                                    .padding(.vertical, 10)
                                    .background(Color.blue)
                                    .cornerRadius(8)
                            }
                        }
                        .padding()
                    }
                }
                .padding(.horizontal)
                .padding(.vertical, 12)
            },
            label: {
                HStack {
                    Image(systemName: "wand.and.stars")
                        .foregroundColor(.orange)
                    Text("Advanced")
                        .font(.headline)
                    
                    Spacer()
                    
                    // Pro badge
                    HStack(spacing: 4) {
                        Image(systemName: "crown.fill")
                            .font(.system(size: 10))
                        Text("Pro")
                            .font(.caption)
                            .fontWeight(.bold)
                    }
                    .foregroundColor(.white)
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                    .background(Color.orange)
                    .cornerRadius(12)
                }
                .padding(.horizontal)
            }
        )
        .onTapGesture {
            // Pro check when tapping to expand
            if !showAdvanced && !isPro {
                onShowPaywall()
            } else {
                showAdvanced.toggle()
            }
        }
        .padding(.vertical, 8)
    }
    
    @ViewBuilder
    private func chordCategory(title: String, chords: [String]) -> some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(title)
                .font(.subheadline)
                .fontWeight(.semibold)
                .foregroundColor(.secondary)
            
            ScrollView(.horizontal, showsIndicators: false) {
                HStack(spacing: 8) {
                    ForEach(chords, id: \.self) { chord in
                        let qualityLabel = getQualityLabel(chord)
                        let isProQuality = QualityMaster.isProQuality(chord)
                        let comment = QualityMaster.getQualityComment(for: chord, locale: "ja")
                        
                        Button(action: {
                            if isProQuality && !isPro {
                                onShowPaywall()
                            } else {
                                selectedQuick = chord
                                selectedSlashBass = nil
                            }
                        }) {
                            HStack(spacing: 4) {
                                Text(qualityLabel)
                                    .font(.caption)
                                    .fontWeight(.semibold)
                                
                                if isProQuality && !isPro {
                                    Image(systemName: "crown.fill")
                                        .font(.system(size: 8))
                                        .foregroundColor(.orange)
                                }
                            }
                            .frame(minWidth: 50)
                            .padding(.vertical, 10)
                            .background(selectedQuick == chord ? Color.blue : Color.gray.opacity(0.15))
                            .foregroundColor(selectedQuick == chord ? .white : .primary)
                            .cornerRadius(6)
                        }
                        .contextMenu {
                            if !comment.isEmpty {
                                Text(comment)
                                    .font(.caption)
                                    .multilineTextAlignment(.leading)
                                    .fixedSize(horizontal: false, vertical: true)
                            }
                        }
                    }
                }
            }
        }
    }
    
    private func getQualityLabel(_ quality: String) -> String {
        switch quality {
        case "Major": return "M"
        case "m (minor)": return "m"
        case "maj7": return "M7"
        case "M9 (maj9)": return "M9"
        case "7(#9)": return "7(#9)"
        case "7(b9)": return "7(b9)"
        case "7(#5)": return "7(#5)"
        case "7(b13)": return "7(b13)"
        default: return quality
        }
    }
}

