{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/pitch/index.ts"],"sourcesContent":["export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n"],"names":["pitch"],"mappings":";;;;;;;;;;;;;;;;;AAcO,SAAS,aAAa,GAAA,EAAiC;IAC5D,OAAO,QAAQ,QACb,OAAO,QAAQ,YACf,UAAU,OACV,OAAO,IAAI,IAAA,KAAS,WAClB,OACA;AACN;AA6BA,IAAM,QAAQ;IAAC;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG,EAAE;CAAA;AAC5B,IAAM,SAAS,CAAC,EAAE,IAAA,EAAM,GAAA,CAAI,CAAA,GAAA,CAAc,KAAA,CAAM,IAAI,CAAA,GAAI,MAAM,GAAA,IAAO;AAErE,IAAM,SAAS,CAAC,EAAE,IAAA,EAAM,GAAA,EAAK,GAAA,EAAK,MAAM,CAAA,CAAE,CAAA,GAC/C,MAAA,CAAO,KAAA,CAAM,IAAI,CAAA,GAAI,MAAM,KAAA,CAAM,QAAQ,KAAA,IAAY,CAAA,MAAO,GAAA,CAAA;AAEvD,IAAM,OAAO,CAACA,WAAiB;IACpC,MAAM,IAAI,OAAOA,MAAK;IACtB,OAAOA,OAAM,GAAA,KAAQ,KAAA,KAAa,KAAK,CAAA,MAAO,KAAK,MAAM,IAAI,KAAK;AACpE;AAEO,SAAS,QAAQA,MAAAA,EAAgC;IACtD,OAAOA,WAAU,QACf,OAAOA,WAAU,YACjB,UAAUA,UACV,OAAOA,OAAM,IAAA,KAAS,YACtB,SAASA,UACT,OAAOA,OAAM,GAAA,KAAQ,YACrB,CAAC,MAAMA,OAAM,IAAI,KACjB,CAAC,MAAMA,OAAM,GAAG,IACd,OACA;AACN;AAGA,IAAM,SAAS;IAAC;IAAG;IAAG;IAAG,CAAA;IAAI;IAAG;IAAG,CAAC;CAAA;AAEpC,IAAM,gBAAgB,OAAO,GAAA,CAAI,CAAC,SAChC,KAAK,KAAA,CAAO,SAAS,IAAK,EAAE;AAMvB,SAAS,YAAYA,MAAAA,EAAgC;IAC1D,MAAM,EAAE,IAAA,EAAM,GAAA,EAAK,GAAA,EAAK,MAAM,CAAA,CAAE,CAAA,GAAIA;IACpC,MAAM,IAAI,MAAA,CAAO,IAAI,CAAA,GAAI,IAAI;IAC7B,IAAI,QAAQ,KAAA,GAAW;QACrB,OAAO;YAAC,MAAM,CAAC;SAAA;IACjB;IACA,MAAM,IAAI,MAAM,aAAA,CAAc,IAAI,CAAA,GAAI,IAAI;IAC1C,OAAO;QAAC,MAAM;QAAG,MAAM,CAAC;KAAA;AAC1B;AAMA,IAAM,kBAAkB;IAAC;IAAG;IAAG;IAAG;IAAG;IAAG;IAAG,CAAC;CAAA;AAKrC,SAAS,MAAM,KAAA,EAAgC;IACpD,MAAM,CAAC,GAAG,GAAG,GAAG,CAAA,GAAI;IACpB,MAAM,OAAO,eAAA,CAAgB,UAAU,CAAC,CAAC,CAAA;IACzC,MAAM,MAAM,KAAK,KAAA,CAAA,CAAO,IAAI,CAAA,IAAK,CAAC;IAClC,IAAI,MAAM,KAAA,GAAW;QACnB,OAAO;YAAE;YAAM;YAAK;QAAI;IAC1B;IACA,MAAM,MAAM,IAAI,IAAI,MAAM,aAAA,CAAc,IAAI,CAAA;IAC5C,OAAO;QAAE;QAAM;QAAK;QAAK;IAAI;AAC/B;AAGA,SAAS,UAAU,CAAA,EAAmB;IACpC,MAAM,IAAA,CAAK,IAAI,CAAA,IAAK;IACpB,OAAO,IAAI,IAAI,IAAI,IAAI;AACzB","debugId":null}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/pitch-interval/index.ts"],"sourcesContent":["import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nexport type IntervalType = Interval;\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/pitch-note/index.ts"],"sourcesContent":["import {\n  coordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type NoteWithOctave = string;\nexport type PcName = string;\nexport type NoteName = NoteWithOctave | PcName;\nexport type NoteLiteral = NoteName | Pitch | NamedPitch;\n\nexport interface Note extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: NoteName;\n  readonly letter: string;\n  readonly acc: string;\n  readonly pc: PcName;\n  readonly chroma: number;\n  readonly height: number;\n  readonly coord: PitchCoordinates;\n  readonly midi: number | null;\n  readonly freq: number | null;\n}\n\nexport type NoteType = Note;\n\nconst NoNote: Note = Object.freeze({\n  empty: true,\n  name: \"\",\n  letter: \"\",\n  acc: \"\",\n  pc: \"\",\n  step: NaN,\n  alt: NaN,\n  chroma: NaN,\n  height: NaN,\n  coord: [] as unknown as PitchCoordinates,\n  midi: null,\n  freq: null,\n});\n\nconst cache: Map<NoteLiteral | undefined, Note> = new Map();\n\nexport const stepToLetter = (step: number) => \"CDEFGAB\".charAt(step);\nexport const altToAcc = (alt: number): string =>\n  alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nexport const accToAlt = (acc: string): number =>\n  acc[0] === \"b\" ? -acc.length : acc.length;\n\n/**\n * Given a note literal (a note name or a note object), returns the Note object\n * @example\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport function note(src: NoteLiteral): Note {\n  const stringSrc = JSON.stringify(src);\n\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n\n  const value =\n    typeof src === \"string\"\n      ? parse(src)\n      : isPitch(src)\n        ? note(pitchName(src))\n        : isNamedPitch(src)\n          ? note(src.name)\n          : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\n\ntype NoteTokens = [string, string, string, string];\n\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * @private\n */\nexport function tokenizeNote(str: string): NoteTokens {\n  const m = REGEX.exec(str) as string[];\n  return m\n    ? [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]]\n    : [\"\", \"\", \"\", \"\"];\n}\n\n/**\n * @private\n */\nexport function coordToNote(noteCoord: PitchCoordinates): Note {\n  return note(pitch(noteCoord)) as Note;\n}\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName: NoteName): Note {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : undefined;\n  const coord = coordinates({ step, alt, oct });\n\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height =\n    oct === undefined\n      ? mod(SEMI[step] + alt, 12) - 12 * 99\n      : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step,\n  };\n}\n\nfunction pitchName(props: Pitch): NoteName {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/pitch-distance/index.ts"],"sourcesContent":["import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison, not pitch class, and in the same octave\n  // it can be descending interval (see #243 & #428)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.oct === to.oct &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n"],"names":[],"mappings":";;;;;;;;;AACA;AAMA;;;AAmBO,SAAS,UACd,QAAA,EACA,YAAA,EACU;IACV,MAAM,WAAO,oKAAA,EAAO,QAAQ;IAC5B,MAAM,gBAAgB,MAAM,OAAA,CAAQ,YAAY,IAC5C,mBACA,4KAAA,EAAW,YAAY,EAAE,KAAA;IAC7B,IAAI,KAAK,KAAA,IAAS,CAAC,iBAAiB,cAAc,MAAA,GAAS,GAAG;QAC5D,OAAO;IACT;IACA,MAAM,YAAY,KAAK,KAAA;IACvB,MAAM,KACJ,UAAU,MAAA,KAAW,IACjB;QAAC,SAAA,CAAU,CAAC,CAAA,GAAI,aAAA,CAAc,CAAC,CAAC;KAAA,GAChC;QAAC,SAAA,CAAU,CAAC,CAAA,GAAI,aAAA,CAAc,CAAC,CAAA;QAAG,SAAA,CAAU,CAAC,CAAA,GAAI,aAAA,CAAc,CAAC,CAAC;KAAA;IACvE,WAAO,2KAAA,EAAY,EAAE,EAAE,IAAA;AACzB;AAGO,SAAS,yBACd,SAAA,EACA,KAAA,EACA;IACA,MAAM,MAAM,UAAU,MAAA;IACtB,OAAO,CAAC,eAAuB;QAC7B,IAAI,CAAC,MAAO,CAAA,OAAO;QACnB,MAAM,QACJ,aAAa,IAAA,CAAK,MAAO,CAAC,aAAa,GAAA,IAAQ,MAAM,aAAa;QACpE,MAAM,UAAU,KAAK,KAAA,CAAM,aAAa,GAAG;QAC3C,MAAM,OAAO,UAAU,OAAO;YAAC;YAAG,OAAO;SAAC;QAC1C,OAAO,UAAU,MAAM,SAAA,CAAU,KAAK,CAAC;IACzC;AACF;AAaO,SAAS,SACd,QAAA,EACA,MAAA,EACc;IACd,MAAM,WAAO,oKAAA,EAAO,QAAQ;IAC5B,MAAM,SAAK,oKAAA,EAAO,MAAM;IACxB,IAAI,KAAK,KAAA,IAAS,GAAG,KAAA,EAAO;QAC1B,OAAO;IACT;IAEA,MAAM,SAAS,KAAK,KAAA;IACpB,MAAM,SAAS,GAAG,KAAA;IAClB,MAAM,SAAS,MAAA,CAAO,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA;IACnC,MAAM,OACJ,OAAO,MAAA,KAAW,KAAK,OAAO,MAAA,KAAW,IACrC,MAAA,CAAO,CAAC,CAAA,GAAI,MAAA,CAAO,CAAC,CAAA,GACpB,CAAC,KAAK,KAAA,CAAO,SAAS,IAAK,EAAE;IAInC,MAAM,kBACJ,GAAG,MAAA,KAAW,KAAK,MAAA,IACnB,GAAG,IAAA,KAAS,QACZ,KAAK,GAAA,KAAQ,GAAG,GAAA,IAChB,KAAK,IAAA,GAAO,GAAG,IAAA;IACjB,WAAO,mLAAA,EAAgB;QAAC;QAAQ,IAAI;KAAA,EAAG,eAAe,EAAE,IAAA;AAC1D","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/abc-notation/index.ts"],"sourcesContent":["import { distance as dist, transpose as tr } from \"@tonaljs/pitch-distance\";\nimport { note } from \"@tonaljs/pitch-note\";\n\nconst fillStr = (character: string, times: number) =>\n  Array(times + 1).join(character);\n\nconst REGEX = /^(_{1,}|=|\\^{1,}|)([abcdefgABCDEFG])([,']*)$/;\n\ntype AbcTokens = [string, string, string];\n\nexport function tokenize(str: string): AbcTokens {\n  const m = REGEX.exec(str);\n  if (!m) {\n    return [\"\", \"\", \"\"];\n  }\n  return [m[1], m[2], m[3]];\n}\n\n/**\n * Convert a (string) note in ABC notation into a (string) note in scientific notation\n *\n * @example\n * abcToScientificNotation(\"c\") // => \"C5\"\n */\nexport function abcToScientificNotation(str: string): string {\n  const [acc, letter, oct] = tokenize(str);\n  if (letter === \"\") {\n    return \"\";\n  }\n  let o = 4;\n  for (let i = 0; i < oct.length; i++) {\n    o += oct.charAt(i) === \",\" ? -1 : 1;\n  }\n  const a =\n    acc[0] === \"_\"\n      ? acc.replace(/_/g, \"b\")\n      : acc[0] === \"^\"\n        ? acc.replace(/\\^/g, \"#\")\n        : \"\";\n  return letter.charCodeAt(0) > 96\n    ? letter.toUpperCase() + a + (o + 1)\n    : letter + a + o;\n}\n\n/**\n * Convert a (string) note in scientific notation into a (string) note in ABC notation\n *\n * @example\n * scientificToAbcNotation(\"C#4\") // => \"^C\"\n */\nexport function scientificToAbcNotation(str: string): string {\n  const n = note(str);\n  if (n.empty || (!n.oct && n.oct !== 0)) {\n    return \"\";\n  }\n  const { letter, acc, oct } = n;\n  const a = acc[0] === \"b\" ? acc.replace(/b/g, \"_\") : acc.replace(/#/g, \"^\");\n  const l = oct > 4 ? letter.toLowerCase() : letter;\n  const o =\n    oct === 5 ? \"\" : oct > 4 ? fillStr(\"'\", oct - 5) : fillStr(\",\", 4 - oct);\n  return a + l + o;\n}\n\nexport function transpose(note: string, interval: string): string {\n  return scientificToAbcNotation(tr(abcToScientificNotation(note), interval));\n}\n\nexport function distance(from: string, to: string): string {\n  return dist(abcToScientificNotation(from), abcToScientificNotation(to));\n}\n\n/** @deprecated */\nexport default {\n  abcToScientificNotation,\n  scientificToAbcNotation,\n  tokenize,\n  transpose,\n  distance,\n};\n"],"names":["note"],"mappings":";;;;;;;;;;;;;;;AAAA,SAAS,YAAY,MAAM,aAAa,UAAU;AAClD,SAAS,YAAY;;;AAErB,IAAM,UAAU,CAAC,WAAmB,QAClC,MAAM,QAAQ,CAAC,EAAE,IAAA,CAAK,SAAS;AAEjC,IAAM,QAAQ;AAIP,SAAS,SAAS,GAAA,EAAwB;IAC/C,MAAM,IAAI,MAAM,IAAA,CAAK,GAAG;IACxB,IAAI,CAAC,GAAG;QACN,OAAO;YAAC;YAAI;YAAI,EAAE;SAAA;IACpB;IACA,OAAO;QAAC,CAAA,CAAE,CAAC,CAAA;QAAG,CAAA,CAAE,CAAC,CAAA;QAAG,CAAA,CAAE,CAAC,CAAC;KAAA;AAC1B;AAQO,SAAS,wBAAwB,GAAA,EAAqB;IAC3D,MAAM,CAAC,KAAK,QAAQ,GAAG,CAAA,GAAI,SAAS,GAAG;IACvC,IAAI,WAAW,IAAI;QACjB,OAAO;IACT;IACA,IAAI,IAAI;IACR,IAAA,IAAS,IAAI,GAAG,IAAI,IAAI,MAAA,EAAQ,IAAK;QACnC,KAAK,IAAI,MAAA,CAAO,CAAC,MAAM,MAAM,CAAA,IAAK;IACpC;IACA,MAAM,IACJ,GAAA,CAAI,CAAC,CAAA,KAAM,MACP,IAAI,OAAA,CAAQ,MAAM,GAAG,IACrB,GAAA,CAAI,CAAC,CAAA,KAAM,MACT,IAAI,OAAA,CAAQ,OAAO,GAAG,IACtB;IACR,OAAO,OAAO,UAAA,CAAW,CAAC,IAAI,KAC1B,OAAO,WAAA,CAAY,IAAI,IAAA,CAAK,IAAI,CAAA,IAChC,SAAS,IAAI;AACnB;AAQO,SAAS,wBAAwB,GAAA,EAAqB;IAC3D,MAAM,QAAI,oKAAA,EAAK,GAAG;IAClB,IAAI,EAAE,KAAA,IAAU,CAAC,EAAE,GAAA,IAAO,EAAE,GAAA,KAAQ,GAAI;QACtC,OAAO;IACT;IACA,MAAM,EAAE,MAAA,EAAQ,GAAA,EAAK,GAAA,CAAI,CAAA,GAAI;IAC7B,MAAM,IAAI,GAAA,CAAI,CAAC,CAAA,KAAM,MAAM,IAAI,OAAA,CAAQ,MAAM,GAAG,IAAI,IAAI,OAAA,CAAQ,MAAM,GAAG;IACzE,MAAM,IAAI,MAAM,IAAI,OAAO,WAAA,CAAY,IAAI;IAC3C,MAAM,IACJ,QAAQ,IAAI,KAAK,MAAM,IAAI,QAAQ,KAAK,MAAM,CAAC,IAAI,QAAQ,KAAK,IAAI,GAAG;IACzE,OAAO,IAAI,IAAI;AACjB;AAEO,SAAS,UAAUA,KAAAA,EAAc,QAAA,EAA0B;IAChE,OAAO,4BAAwB,6KAAA,EAAG,wBAAwBA,KAAI,GAAG,QAAQ,CAAC;AAC5E;AAEO,SAAS,SAAS,IAAA,EAAc,EAAA,EAAoB;IACzD,WAAO,4KAAA,EAAK,wBAAwB,IAAI,GAAG,wBAAwB,EAAE,CAAC;AACxE;AAGA,IAAO,uBAAQ;IACb;IACA;IACA;IACA;IACA;AACF","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/array/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { note, Note } from \"@tonaljs/pitch-note\";\n\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It's completely agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} array\n * @return {Array} the rotated array\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the array with the null values removed\n * @function\n * @param {Array} array\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Sort an array of notes in ascending order. Pitch classes are listed\n * before notes. Any string that is not a note is removed.\n *\n * @param {string[]} notes\n * @return {string[]} sorted array of notes\n *\n * @example\n * sortedNoteNames(['c2', 'c5', 'c1', 'c0', 'c6', 'c'])\n * // => ['C', 'C0', 'C1', 'C2', 'C5', 'C6']\n * sortedNoteNames(['c', 'F', 'G', 'a', 'b', 'h', 'J'])\n * // => ['C', 'F', 'G', 'A', 'B']\n */\nexport function sortedNoteNames(notes: string[]): string[] {\n  const valid = notes.map((n) => note(n)).filter((n) => !n.empty) as Note[];\n  return valid.sort((a, b) => a.height - b.height).map((n) => n.name);\n}\n\n/**\n * Get sorted notes with duplicates removed. Pitch classes are listed\n * before notes.\n *\n * @function\n * @param {string[]} array\n * @return {string[]} unique sorted notes\n *\n * @example\n * Array.sortedUniqNoteNames(['a', 'b', 'c2', '1p', 'p2', 'c2', 'b', 'c', 'c3' ])\n * // => [ 'C', 'A', 'B', 'C2', 'C3' ]\n */\nexport function sortedUniqNoteNames(arr: string[]): string[] {\n  return sortedNoteNames(arr).filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Randomizes the order of the specified array in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} array\n * @return {Array} the array shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an array\n *\n * @param {Array} array - the array\n * @return {Array<Array>} an array with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      }),\n    );\n  }, []);\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AACA,SAAS,YAAkB;;AAG3B,SAAS,KAAK,CAAA,EAAW,CAAA,EAAW;IAClC,MAAM,IAAI,CAAC,CAAA;IAEX,MAAO,KAAK,CAAA,CAAE,CAAC,CAAA,GAAI,IAAI,EAAE;IACzB,OAAO;AACT;AAEA,SAAS,MAAM,CAAA,EAAW,CAAA,EAAW;IACnC,MAAM,IAAI,CAAC,CAAA;IAEX,MAAO,KAAK,CAAA,CAAE,CAAC,CAAA,GAAI,IAAI,EAAE;IACzB,OAAO;AACT;AAaO,SAAS,MAAM,IAAA,EAAc,EAAA,EAAsB;IACxD,OAAO,OAAO,KAAK,KAAK,MAAM,KAAK,OAAO,CAAC,IAAI,MAAM,MAAM,OAAO,KAAK,CAAC;AAC1E;AAaO,SAAS,OAAU,KAAA,EAAe,GAAA,EAAe;IACtD,MAAM,MAAM,IAAI,MAAA;IAChB,MAAM,IAAA,CAAM,QAAQ,MAAO,GAAA,IAAO;IAClC,OAAO,IAAI,KAAA,CAAM,GAAG,GAAG,EAAE,MAAA,CAAO,IAAI,KAAA,CAAM,GAAG,CAAC,CAAC;AACjD;AAWO,SAAS,QAAQ,GAAA,EAAmB;IACzC,OAAO,IAAI,MAAA,CAAO,CAAC,IAAM,MAAM,KAAK,CAAC;AACvC;AAeO,SAAS,gBAAgB,KAAA,EAA2B;IACzD,MAAM,QAAQ,MAAM,GAAA,CAAI,CAAC,QAAM,oKAAA,EAAK,CAAC,CAAC,EAAE,MAAA,CAAO,CAAC,IAAM,CAAC,EAAE,KAAK;IAC9D,OAAO,MAAM,IAAA,CAAK,CAAC,GAAG,IAAM,EAAE,MAAA,GAAS,EAAE,MAAM,EAAE,GAAA,CAAI,CAAC,IAAM,EAAE,IAAI;AACpE;AAcO,SAAS,oBAAoB,GAAA,EAAyB;IAC3D,OAAO,gBAAgB,GAAG,EAAE,MAAA,CAAO,CAAC,GAAG,GAAG,IAAM,MAAM,KAAK,MAAM,CAAA,CAAE,IAAI,CAAC,CAAC;AAC3E;AAYO,SAAS,QAAQ,GAAA,EAAY,MAAM,KAAK,MAAA,EAAe;IAC5D,IAAI;IACJ,IAAI;IACJ,IAAI,IAAY,IAAI,MAAA;IACpB,MAAO,EAAG;QACR,IAAI,KAAK,KAAA,CAAM,IAAI,IAAI,GAAG;QAC1B,IAAI,GAAA,CAAI,CAAC,CAAA;QACT,GAAA,CAAI,CAAC,CAAA,GAAI,GAAA,CAAI,CAAC,CAAA;QACd,GAAA,CAAI,CAAC,CAAA,GAAI;IACX;IACA,OAAO;AACT;AAkBO,SAAS,aAAa,GAAA,EAAmB;IAC9C,IAAI,IAAI,MAAA,KAAW,GAAG;QACpB,OAAO;YAAC,CAAC,CAAC;SAAA;IACZ;IACA,OAAO,aAAa,IAAI,KAAA,CAAM,CAAC,CAAC,EAAE,MAAA,CAAO,CAAC,KAAK,SAAS;QACtD,OAAO,IAAI,MAAA,CACT,IAAI,GAAA,CAAI,CAAC,GAAG,QAAQ;YAClB,MAAM,UAAU,KAAK,KAAA,CAAM;YAC3B,QAAQ,MAAA,CAAO,KAAK,GAAG,GAAA,CAAI,CAAC,CAAC;YAC7B,OAAO;QACT,CAAC;IAEL,GAAG,CAAC,CAAC;AACP","debugId":null}},
    {"offset": {"line": 599, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/collection/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} collection\n * @return {Array} the rotated collection\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the collection with the null values removed\n * @function\n * @param {Array} collection\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} collection\n * @return {Array} the collection shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an collection\n *\n * @param {Array} collection - the collection\n * @return {Array<Array>} an collection with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      }),\n    );\n  }, []);\n}\n\n/** @deprecated */\nexport default {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAEA,SAAS,KAAK,CAAA,EAAW,CAAA,EAAW;IAClC,MAAM,IAAI,CAAC,CAAA;IAEX,MAAO,KAAK,CAAA,CAAE,CAAC,CAAA,GAAI,IAAI,EAAE;IACzB,OAAO;AACT;AAEA,SAAS,MAAM,CAAA,EAAW,CAAA,EAAW;IACnC,MAAM,IAAI,CAAC,CAAA;IAEX,MAAO,KAAK,CAAA,CAAE,CAAC,CAAA,GAAI,IAAI,EAAE;IACzB,OAAO;AACT;AAaO,SAAS,MAAM,IAAA,EAAc,EAAA,EAAsB;IACxD,OAAO,OAAO,KAAK,KAAK,MAAM,KAAK,OAAO,CAAC,IAAI,MAAM,MAAM,OAAO,KAAK,CAAC;AAC1E;AAaO,SAAS,OAAU,KAAA,EAAe,GAAA,EAAe;IACtD,MAAM,MAAM,IAAI,MAAA;IAChB,MAAM,IAAA,CAAM,QAAQ,MAAO,GAAA,IAAO;IAClC,OAAO,IAAI,KAAA,CAAM,GAAG,GAAG,EAAE,MAAA,CAAO,IAAI,KAAA,CAAM,GAAG,CAAC,CAAC;AACjD;AAWO,SAAS,QAAQ,GAAA,EAAmB;IACzC,OAAO,IAAI,MAAA,CAAO,CAAC,IAAM,MAAM,KAAK,CAAC;AACvC;AAYO,SAAS,QAAQ,GAAA,EAAY,MAAM,KAAK,MAAA,EAAe;IAC5D,IAAI;IACJ,IAAI;IACJ,IAAI,IAAY,IAAI,MAAA;IACpB,MAAO,EAAG;QACR,IAAI,KAAK,KAAA,CAAM,IAAI,IAAI,GAAG;QAC1B,IAAI,GAAA,CAAI,CAAC,CAAA;QACT,GAAA,CAAI,CAAC,CAAA,GAAI,GAAA,CAAI,CAAC,CAAA;QACd,GAAA,CAAI,CAAC,CAAA,GAAI;IACX;IACA,OAAO;AACT;AAkBO,SAAS,aAAa,GAAA,EAAmB;IAC9C,IAAI,IAAI,MAAA,KAAW,GAAG;QACpB,OAAO;YAAC,CAAC,CAAC;SAAA;IACZ;IACA,OAAO,aAAa,IAAI,KAAA,CAAM,CAAC,CAAC,EAAE,MAAA,CAAO,CAAC,KAAK,SAAS;QACtD,OAAO,IAAI,MAAA,CACT,IAAI,GAAA,CAAI,CAAC,GAAG,QAAQ;YAClB,MAAM,UAAU,KAAK,KAAA,CAAM;YAC3B,QAAQ,MAAA,CAAO,KAAK,GAAG,GAAA,CAAI,CAAC,CAAC;YAC7B,OAAO;QACT,CAAC;IAEL,GAAG,CAAC,CAAC;AACP;AAGA,IAAO,qBAAQ;IACb;IACA;IACA;IACA;IACA;AACF","debugId":null}},
    {"offset": {"line": 674, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/pcset/index.ts"],"sourcesContent":["import { compact, range, rotate } from \"@tonaljs/collection\";\nimport { NotFound } from \"@tonaljs/pitch\";\nimport { transpose } from \"@tonaljs/pitch-distance\";\nimport { Interval, IntervalName, interval } from \"@tonaljs/pitch-interval\";\nimport { Note, NoteName, note } from \"@tonaljs/pitch-note\";\n\n/**\n * The properties of a pitch class set\n * @param {number} num - a number between 1 and 4095 (both included) that\n * uniquely identifies the set. It's the decimal number of the chroma.\n * @param {string} chroma - a string representation of the set: a 12-char string\n * with either \"1\" or \"0\" as characters, representing a pitch class or not\n * for the given position in the octave. For example, a \"1\" at index 0 means 'C',\n * a \"1\" at index 2 means 'D', and so on...\n * @param {string} normalized - the chroma but shifted to the first 1\n * @param {number} length - the number of notes of the pitch class set\n * @param {IntervalName[]} intervals - the intervals of the pitch class set\n * *starting from C*\n */\nexport interface Pcset {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly setNum: number;\n  readonly chroma: PcsetChroma;\n  readonly normalized: PcsetChroma;\n  readonly intervals: IntervalName[];\n}\n\nexport const EmptyPcset: Pcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: [],\n};\n\nexport type PcsetChroma = string;\nexport type PcsetNum = number;\n\n// UTILITIES\nconst setNumToChroma = (num: number): string =>\n  Number(num).toString(2).padStart(12, \"0\");\nconst chromaToNumber = (chroma: string): number => parseInt(chroma, 2);\nconst REGEX = /^[01]{12}$/;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isChroma(set: any): set is PcsetChroma {\n  return REGEX.test(set);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcsetNum = (set: any): set is PcsetNum =>\n  typeof set === \"number\" && set >= 0 && set <= 4095;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcset = (set: any): set is Pcset => set && isChroma(set.chroma);\n\nconst cache: { [key in string]: Pcset } = { [EmptyPcset.chroma]: EmptyPcset };\n\n/**\n * A definition of a pitch class set. It could be:\n * - The pitch class set chroma (a 12-length string with only 1s or 0s)\n * - The pitch class set number (an integer between 1 and 4095)\n * - An array of note names\n * - An array of interval names\n */\nexport type Set =\n  | Partial<Pcset>\n  | PcsetChroma\n  | PcsetNum\n  | NoteName[]\n  | IntervalName[];\n\n/**\n * Get the pitch class set of a collection of notes or set number or chroma\n */\nexport function get(src: Set): Pcset {\n  const chroma: PcsetChroma = isChroma(src)\n    ? src\n    : isPcsetNum(src)\n      ? setNumToChroma(src)\n      : Array.isArray(src)\n        ? listToChroma(src)\n        : isPcset(src)\n          ? src.chroma\n          : EmptyPcset.chroma;\n\n  return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\n}\n\n/**\n * @use Pcset.get\n * @deprecated\n */\nexport const pcset = get;\n\n/**\n * Get pitch class set chroma\n * @function\n * @example\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\n */\nexport const chroma = (set: Set) => get(set).chroma;\n\n/**\n * Get intervals (from C) of a set\n * @function\n * @example\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\n */\nexport const intervals = (set: Set) => get(set).intervals;\n\n/**\n * Get pitch class set number\n * @function\n * @example\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n */\nexport const num = (set: Set) => get(set).setNum;\n\nconst IVLS = [\n  \"1P\",\n  \"2m\",\n  \"2M\",\n  \"3m\",\n  \"3M\",\n  \"4P\",\n  \"5d\",\n  \"5P\",\n  \"6m\",\n  \"6M\",\n  \"7m\",\n  \"7M\",\n];\n\n/**\n * Get the intervals of a pcset *starting from C*\n * @private\n * @param {Set} set - the pitch class set\n * @return {IntervalName[]} an array of interval names or an empty array\n * if not a valid pitch class set\n */\nfunction chromaToIntervals(chroma: PcsetChroma): IntervalName[] {\n  const intervals = [];\n  for (let i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n  return intervals;\n}\n\nexport function notes(set: Set): NoteName[] {\n  return get(set).intervals.map((ivl) => transpose(\"C\", ivl));\n}\n\n/**\n * Get a list of all possible pitch class sets (all possible chromas) *having\n * C as root*. There are 2048 different chromas. If you want them with another\n * note you have to transpose it\n *\n * @see http://allthescales.org/\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\n */\nexport function chromas(): PcsetChroma[] {\n  return range(2048, 4095).map(setNumToChroma);\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set: Set, normalize = true): PcsetChroma[] {\n  const pcs = get(set);\n\n  const binary = pcs.chroma.split(\"\");\n  return compact(\n    binary.map((_, i) => {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    }),\n  );\n}\n\n/**\n * Test if two pitch class sets are equal\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1: Set, s2: Set) {\n  return get(s1).setNum === get(s2).setNum;\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function is curried.\n *\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\n * list of notes)\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\n * to test against (chroma or list of notes)\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set: Set) {\n  const s = get(set).setNum;\n\n  return (notes: Set | Pcset) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o & s) === o;\n  };\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Set} set - an array of notes or a chroma set string to test against\n * @return {(subset: Set): boolean} a function that given a set\n * returns true if is a subset of the first one\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set: Set) {\n  const s = get(set).setNum;\n  return (notes: Set) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o | s) === o;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\n * isNoteInCMajor('C4') // => true\n * isNoteInCMajor('C#4') // => false\n */\nexport function isNoteIncludedIn(set: Set) {\n  const s = get(set);\n\n  return (noteName: NoteName): boolean => {\n    const n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n\n/** @deprecated use: isNoteIncludedIn */\nexport const includes = isNoteIncludedIn;\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set: Set) {\n  const isIncluded = isNoteIncludedIn(set);\n  return (notes: NoteName[]) => {\n    return notes.filter(isIncluded);\n  };\n}\n\n/** @deprecated */\nexport default {\n  get,\n  chroma,\n  num,\n  intervals,\n  chromas,\n  isSupersetOf,\n  isSubsetOf,\n  isNoteIncludedIn,\n  isEqual,\n  filter,\n  modes,\n  notes,\n  // deprecated\n  pcset,\n};\n\n//// PRIVATE ////\n\nfunction chromaRotations(chroma: string): string[] {\n  const binary = chroma.split(\"\");\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\n}\n\nfunction chromaToPcset(chroma: PcsetChroma): Pcset {\n  const setNum = chromaToNumber(chroma);\n  const normalizedNum = chromaRotations(chroma)\n    .map(chromaToNumber)\n    .filter((n) => n >= 2048)\n    .sort()[0];\n  const normalized = setNumToChroma(normalizedNum);\n\n  const intervals = chromaToIntervals(chroma);\n\n  return {\n    empty: false,\n    name: \"\",\n    setNum,\n    chroma,\n    normalized,\n    intervals,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction listToChroma(set: any[]): PcsetChroma {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  let pitch: Note | Interval | NotFound;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < set.length; i++) {\n    pitch = note(set[i]);\n    // tslint:disable-next-line: curly\n    if (pitch.empty) pitch = interval(set[i]);\n    // tslint:disable-next-line: curly\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n  return binary.join(\"\");\n}\n"],"names":["num","chroma","intervals","notes"],"mappings":"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","debugId":null}},
    {"offset": {"line": 878, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/chord-type/index.ts","file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/chord-type/data.ts"],"sourcesContent":["import {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\n/** @deprecated */\nexport const chordType = get;\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\n/** @deprecated */\nexport const entries = all;\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\n/** @deprecated */\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n","/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Δ9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n"],"names":["names"],"mappings":"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","debugId":null}},
    {"offset": {"line": 1524, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/chord-detect/index.ts"],"sourcesContent":["import { all, ChordType } from \"@tonaljs/chord-type\";\nimport { modes } from \"@tonaljs/pcset\";\nimport { note } from \"@tonaljs/pitch-note\";\n\ninterface FoundChord {\n  readonly weight: number;\n  readonly name: string;\n}\n\nconst namedSet = (notes: string[]) => {\n  const pcToName = notes.reduce<Record<number, string>>((record, n) => {\n    const chroma = note(n).chroma;\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || note(n).name;\n    }\n    return record;\n  }, {});\n\n  return (chroma: number) => pcToName[chroma];\n};\n\ntype DetectOptions = {\n  assumePerfectFifth: boolean;\n};\nexport function detect(\n  source: string[],\n  options: Partial<DetectOptions> = {},\n): string[] {\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\n  if (note.length === 0) {\n    return [];\n  }\n\n  const found: FoundChord[] = findMatches(notes, 1, options);\n\n  return found\n    .filter((chord) => chord.weight)\n    .sort((a, b) => b.weight - a.weight)\n    .map((chord) => chord.name);\n}\n\n/* tslint:disable:no-bitwise */\nconst BITMASK = {\n  // 3m 000100000000\n  // 3M 000010000000\n  anyThirds: 384,\n  // 5P 000000010000\n  perfectFifth: 16,\n  // 5d 000000100000\n  // 5A 000000001000\n  nonPerfectFifths: 40,\n  anySeventh: 3,\n};\n\nconst testChromaNumber = (bitmask: number) => (chromaNumber: number) =>\n  Boolean(chromaNumber & bitmask);\nconst hasAnyThird = testChromaNumber(BITMASK.anyThirds);\nconst hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth);\nconst hasAnySeventh = testChromaNumber(BITMASK.anySeventh);\nconst hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths);\n\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType: ChordType) {\n  const chromaNumber = parseInt(chordType.chroma, 2);\n  return (\n    hasAnyThird(chromaNumber) &&\n    hasPerfectFifth(chromaNumber) &&\n    hasAnySeventh(chromaNumber)\n  );\n}\n\nfunction withPerfectFifth(chroma: string): string {\n  const chromaNumber = parseInt(chroma, 2);\n  return hasNonPerfectFifth(chromaNumber)\n    ? chroma\n    : (chromaNumber | 16).toString(2);\n}\n\n/* tslint:enable:no-bitwise */\n\ntype FindMatchesOptions = {\n  assumePerfectFifth: boolean;\n};\nfunction findMatches(\n  notes: string[],\n  weight: number,\n  options: Partial<FindMatchesOptions>,\n): FoundChord[] {\n  const tonic = notes[0];\n  const tonicChroma = note(tonic).chroma;\n  const noteName = namedSet(notes);\n  // we need to test all chromas to get the correct baseNote\n  const allModes = modes(notes, false);\n\n  const found: FoundChord[] = [];\n  allModes.forEach((mode, index) => {\n    const modeWithPerfectFifth =\n      options.assumePerfectFifth && withPerfectFifth(mode);\n    // some chords could have the same chroma but different interval spelling\n    const chordTypes = all().filter((chordType) => {\n      if (\n        options.assumePerfectFifth &&\n        hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)\n      ) {\n        return chordType.chroma === modeWithPerfectFifth;\n      }\n      return chordType.chroma === mode;\n    });\n\n    chordTypes.forEach((chordType) => {\n      const chordName = chordType.aliases[0];\n      const baseNote = noteName(index);\n      const isInversion = index !== tonicChroma;\n      if (isInversion) {\n        found.push({\n          weight: 0.5 * weight,\n          name: `${baseNote}${chordName}/${tonic}`,\n        });\n      } else {\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\n      }\n    });\n  });\n\n  return found;\n}\n\n/** @deprecated */\nexport default { detect };\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1621, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/interval/index.ts"],"sourcesContent":["import { IntervalCoordinates, NoteCoordinates } from \"@tonaljs/pitch\";\nimport { distance as dist } from \"@tonaljs/pitch-distance\";\nimport {\n  IntervalName,\n  coordToInterval,\n  interval as props,\n} from \"@tonaljs/pitch-interval\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the subtracted interval name\n * @example\n * Interval.subtract('5P', '3M') // => '3m'\n * Interval.subtract('3M', '5P') // => '-3m'\n */\nexport const subtract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number,\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\n/** @deprecated */\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  subtract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates,\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n"],"names":["name","semitones"],"mappings":"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","debugId":null}},
    {"offset": {"line": 1758, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/scale-type/index.ts","file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/scale-type/data.ts"],"sourcesContent":["import {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\n/**\n * Properties for a scale in the scale dictionary. It's a pitch class set\n * properties with the following additional information:\n * - name: the scale name\n * - aliases: alternative list of names\n * - intervals: an array of interval names\n */\nexport interface ScaleType extends Pcset {\n  readonly name: string;\n  readonly aliases: string[];\n}\n\nexport const NoScaleType: ScaleType = {\n  ...EmptyPcset,\n  intervals: [],\n  aliases: [],\n};\n\ntype ScaleTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ScaleType[] = [];\nlet index: Record<ScaleTypeName, ScaleType> = {};\n\nexport function names() {\n  return dictionary.map((scale) => scale.name);\n}\n\n/**\n * Given a scale name or chroma, return the scale properties\n *\n * @param {string} type - scale name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/scale-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ScaleTypeName): ScaleType {\n  return index[type] || NoScaleType;\n}\n\n/**\n * @deprecated\n * @use ScaleType.get\n */\nexport const scaleType = get;\n\n/**\n * Return a list of all scale types\n */\nexport function all() {\n  return dictionary.slice();\n}\n\n/**\n * @deprecated\n * @use ScaleType.all\n */\nexport const entries = all;\n\n/**\n * Keys used to reference scale types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a scale into dictionary\n * @param intervals\n * @param name\n * @param aliases\n */\nexport function add(\n  intervals: string[],\n  name: string,\n  aliases: string[] = [],\n): ScaleType {\n  const scale = { ...pcset(intervals), name, intervals, aliases };\n  dictionary.push(scale);\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\n  return scale;\n}\n\nexport function addAlias(scale: ScaleType, alias: string) {\n  index[alias] = scale;\n}\n\ndata.forEach(([ivls, name, ...aliases]: string[]) =>\n  add(ivls.split(\" \"), name, aliases),\n);\n\n/** @deprecated */\nexport default {\n  names,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n\n  // deprecated\n  entries,\n  scaleType,\n};\n","// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nconst SCALES: string[][] = [\n  // Basic scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\n\n  // Jazz common scales\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n\n  // Modes\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n\n  // 5-note scales\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\n    \"1P 2m 2A 3M 4A 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\",\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"mixolydian b6\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\n    \"1P 2m 3m 4P 5P 6M 7m\",\n    \"dorian b2\",\n    \"phrygian #6\",\n    \"melodic minor second mode\",\n  ],\n  [\n    \"1P 2m 3m 4d 5d 6m 7d\",\n    \"ultralocrian\",\n    \"superlocrian bb7\",\n    \"superlocrian diminished\",\n  ],\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\n  [\n    \"1P 2M 3m 4A 5P 6M 7m\",\n    \"dorian #4\",\n    \"ukrainian dorian\",\n    \"romanian minor\",\n    \"altered dorian\",\n  ],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\n    \"1P 2M 3M 4P 5A 6M 7M\",\n    \"major augmented\",\n    \"major #5\",\n    \"ionian augmented\",\n    \"ionian #5\",\n  ],\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\n    \"half-whole diminished\",\n    \"dominant diminished\",\n    \"messiaen's mode #2\",\n  ],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\n\n  // 10-note scales\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\n];\n\nexport default SCALES;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 2268, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/chord/index.ts"],"sourcesContent":["import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { subtract } from \"@tonaljs/interval\";\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\nimport {\n  distance,\n  tonicIntervalsTransposer,\n  transpose as transposeNote,\n} from \"@tonaljs/pitch-distance\";\nimport { NoteName, note, tokenizeNote } from \"@tonaljs/pitch-note\";\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\n\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordNameOrTokens =\n  | string // full name to be parsed\n  | [string] // only the name\n  | [string, string] // tonic, name\n  | [string, string, string]; // tonic, name, bass\ntype ChordNameTokens = [string, string, string]; // [TONIC, SCALE TYPE, BASS]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  bass: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  bass: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\n//const NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic, chord type and bass\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * This function does NOT check if the bass is part of the chord or not but it\n * only accepts a pitch class as bass\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type, bass]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return tokenizeBass(\"\", name);\n  } else if (letter === \"A\" && type === \"ug\") {\n    return tokenizeBass(\"\", \"aug\");\n  } else {\n    return tokenizeBass(letter + acc, oct + type);\n  }\n}\n\nfunction tokenizeBass(note: string, chord: string): ChordNameTokens {\n  const split = chord.split(\"/\");\n  if (split.length === 1) {\n    return [note, split[0], \"\"];\n  }\n  const [letter, acc, oct, type] = tokenizeNote(split[1]);\n  // Only a pitch class is accepted as bass note\n  if (letter !== \"\" && oct === \"\" && type === \"\") {\n    return [note, split[0], letter + acc];\n  } else {\n    return [note, chord, \"\"];\n  }\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordNameOrTokens): Chord {\n  if (Array.isArray(src)) {\n    return getChord(src[1] || \"\", src[0], src[2]);\n  } else if (src === \"\") {\n    return NoChord;\n  } else {\n    const [tonic, type, bass] = tokenize(src);\n    const chord = getChord(type, tonic, bass);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalBass?: string,\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const bass = note(optionalBass || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalBass && bass.empty)\n  ) {\n    return NoChord;\n  }\n\n  const bassInterval = distance(tonic.pc, bass.pc);\n  const bassIndex = type.intervals.indexOf(bassInterval);\n  const hasRoot = bassIndex >= 0;\n  const root = hasRoot ? bass : note(\"\");\n  const rootDegree = bassIndex === -1 ? NaN : bassIndex + 1;\n  const hasBass = bass.pc && bass.pc !== tonic.pc;\n\n  const intervals = Array.from(type.intervals);\n\n  if (hasRoot) {\n    for (let i = 1; i < rootDegree; i++) {\n      const num = intervals[0][0];\n      const quality = intervals[0][1];\n      const newNum = parseInt(num, 10) + 7;\n      intervals.push(`${newNum}${quality}`);\n      intervals.shift();\n    }\n  } else if (hasBass) {\n    const ivl = subtract(distance(tonic.pc, bass.pc), \"8P\");\n    if (ivl) intervals.unshift(ivl);\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic.pc, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    hasRoot && rootDegree > 1 ? \"/\" + root.pc : hasBass ? \"/\" + bass.pc : \"\"\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    hasRoot && rootDegree > 1\n      ? \" over \" + root.pc\n      : hasBass\n        ? \" over \" + bass.pc\n        : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    tonic: tonic.pc,\n    type: type.name,\n    root: root.pc,\n    bass: hasBass ? bass.pc : \"\",\n    intervals,\n    rootDegree,\n    notes,\n  };\n}\n\nexport const chord = get;\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type, bass] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  const tr = transposeNote(bass, interval);\n  const slash = tr ? \"/\" + tr : \"\";\n  return transposeNote(tonic, interval) + type + slash;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Return the chord notes\n */\nexport function notes(chordName: ChordNameOrTokens, tonic?: string): string[] {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  if (!note || chord.empty) return [];\n  return chord.intervals.map((ivl) => transposeNote(note, ivl));\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  const transpose = tonicIntervalsTransposer(chord.intervals, note);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  return tonicIntervalsTransposer(chord.intervals, note);\n}\n\n/** @deprecated */\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n  notes,\n  chord,\n};\n"],"names":["detect","note","chord","notes","transpose"],"mappings":"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","debugId":null}},
    {"offset": {"line": 2511, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/duration-value/data.ts","file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/duration-value/index.ts"],"sourcesContent":["// source: https://en.wikipedia.org/wiki/Note_value\nconst DATA: [number, string, string[]][] = [\n  [\n    0.125,\n    \"dl\",\n    [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\n  ],\n  [0.25, \"l\", [\"long\", \"longa\"]],\n  [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\n  [1, \"w\", [\"whole\", \"semibreve\"]],\n  [2, \"h\", [\"half\", \"minim\"]],\n  [4, \"q\", [\"quarter\", \"crotchet\"]],\n  [8, \"e\", [\"eighth\", \"quaver\"]],\n  [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\n  [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\n  [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\n  [128, \"h\", [\"hundred twenty-eighth\"]],\n  [256, \"th\", [\"two hundred fifty-sixth\"]],\n];\n\nexport default DATA;\n","import DATA from \"./data\";\n\ntype Fraction = [number, number];\n\nconst VALUES: DurationValue[] = [];\n\nDATA.forEach(([denominator, shorthand, names]) =>\n  add(denominator, shorthand, names),\n);\n\nexport interface DurationValue {\n  empty: boolean;\n  value: number;\n  name: string;\n  fraction: Fraction;\n  shorthand: string;\n  dots: string;\n  names: string[];\n}\n\nconst NoDuration: DurationValue = {\n  empty: true,\n  name: \"\",\n  value: 0,\n  fraction: [0, 0],\n  shorthand: \"\",\n  dots: \"\",\n  names: [],\n};\n\nexport function names(): string[] {\n  return VALUES.reduce((names, duration) => {\n    duration.names.forEach((name) => names.push(name));\n    return names;\n  }, [] as string[]);\n}\n\nexport function shorthands(): string[] {\n  return VALUES.map((dur) => dur.shorthand);\n}\n\nconst REGEX = /^([^.]+)(\\.*)$/;\n\nexport function get(name: string): DurationValue {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, simple, dots] = REGEX.exec(name) || [];\n  const base = VALUES.find(\n    (dur) => dur.shorthand === simple || dur.names.includes(simple),\n  );\n  if (!base) {\n    return NoDuration;\n  }\n\n  const fraction = calcDots(base.fraction, dots.length);\n  const value = fraction[0] / fraction[1];\n\n  return { ...base, name, dots, value, fraction };\n}\n\nexport const value = (name: string) => get(name).value;\nexport const fraction = (name: string) => get(name).fraction;\n\n/** @deprecated */\nexport default { names, shorthands, get, value, fraction };\n\n//// PRIVATE ////\n\nfunction add(denominator: number, shorthand: string, names: string[]) {\n  VALUES.push({\n    empty: false,\n    dots: \"\",\n    name: \"\",\n    value: 1 / denominator,\n    fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\n    shorthand,\n    names,\n  });\n}\n\nfunction calcDots(fraction: Fraction, dots: number): Fraction {\n  const pow = Math.pow(2, dots);\n\n  let numerator = fraction[0] * pow;\n  let denominator = fraction[1] * pow;\n  const base = numerator;\n\n  // add fractions\n  for (let i = 0; i < dots; i++) {\n    numerator += base / Math.pow(2, i + 1);\n  }\n\n  // simplify\n  while (numerator % 2 === 0 && denominator % 2 === 0) {\n    numerator /= 2;\n    denominator /= 2;\n  }\n  return [numerator, denominator];\n}\n"],"names":["names","fraction","value"],"mappings":"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","debugId":null}},
    {"offset": {"line": 2717, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/midi/index.ts"],"sourcesContent":["import { NoteName, note as props } from \"@tonaljs/pitch-note\";\n\ntype Midi = number;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isMidi(arg: any): arg is Midi {\n  return +arg >= 0 && +arg <= 127;\n}\n\n/**\n * Get the note midi number (a number between 0 and 127)\n *\n * It returns undefined if not valid note name\n *\n * @function\n * @param {string|number} note - the note name or midi number\n * @return {Integer} the midi number or undefined if not valid note\n * @example\n * import { toMidi } from '@tonaljs/midi'\n * toMidi(\"C4\") // => 60\n * toMidi(60) // => 60\n * toMidi('60') // => 60\n */\nexport function toMidi(note: NoteName | number): number | null {\n  if (isMidi(note)) {\n    return +note;\n  }\n  const n = props(note);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Get the frequency in hertz from midi number\n *\n * @param {number} midi - the note midi number\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\n * @return {number} the frequency or null if not valid note midi\n * @example\n * import { midiToFreq} from '@tonaljs/midi'\n * midiToFreq(69) // => 440\n */\nexport function midiToFreq(midi: number, tuning = 440): number {\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precision)\n *\n * @param {number} frequency\n * @return {number}\n * @example\n * import { freqToMidi} from '@tonaljs/midi'\n * freqToMidi(220)); //=> 57\n * freqToMidi(261.62)); //=> 60\n * freqToMidi(261)); //=> 59.96\n */\nexport function freqToMidi(freq: number): number {\n  const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nexport interface ToNoteNameOptions {\n  pitchClass?: boolean;\n  sharps?: boolean;\n}\n\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * import { midiToNoteName } from '@tonaljs/midi'\n * midiToNoteName(61) // => \"Db4\"\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\n * // it rounds to nearest note\n * midiToNoteName(61.7) // => \"D4\"\n */\nexport function midiToNoteName(midi: number, options: ToNoteNameOptions = {}) {\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n  midi = Math.round(midi);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[midi % 12];\n  if (options.pitchClass) {\n    return pc;\n  }\n  const o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nexport function chroma(midi: number): number {\n  return midi % 12;\n}\n\nfunction pcsetFromChroma(chroma: string): number[] {\n  return chroma.split(\"\").reduce((pcset, val, index) => {\n    if (index < 12 && val === \"1\") pcset.push(index);\n    return pcset;\n  }, [] as number[]);\n}\n\nfunction pcsetFromMidi(midi: number[]): number[] {\n  return midi\n    .map(chroma)\n    .sort((a, b) => a - b)\n    .filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Given a list of midi numbers, returns the pitch class set (unique chroma numbers)\n * @param midi\n * @example\n *\n */\nexport function pcset(notes: number[] | string): number[] {\n  return Array.isArray(notes) ? pcsetFromMidi(notes) : pcsetFromChroma(notes);\n}\n\nexport function pcsetNearest(notes: number[] | string) {\n  const set = pcset(notes);\n  return (midi: number): number | undefined => {\n    const ch = chroma(midi);\n    for (let i = 0; i < 12; i++) {\n      if (set.includes(ch + i)) return midi + i;\n      if (set.includes(ch - i)) return midi - i;\n    }\n    return undefined;\n  };\n}\n\nexport function pcsetSteps(notes: number[] | string, tonic: number) {\n  const set = pcset(notes);\n  const len = set.length;\n  return (step: number): number => {\n    const index = step < 0 ? (len - (-step % len)) % len : step % len;\n    const octaves = Math.floor(step / len);\n    return set[index] + octaves * 12 + tonic;\n  };\n}\n\nexport function pcsetDegrees(notes: number[] | string, tonic: number) {\n  const steps = pcsetSteps(notes, tonic);\n  return (degree: number): number | undefined => {\n    if (degree === 0) return undefined;\n    return steps(degree > 0 ? degree - 1 : degree);\n  };\n}\n\n/** @deprecated */\nexport default {\n  chroma,\n  freqToMidi,\n  isMidi,\n  midiToFreq,\n  midiToNoteName,\n  pcsetNearest,\n  pcset,\n  pcsetDegrees,\n  pcsetSteps,\n  toMidi,\n};\n"],"names":["chroma","pcset"],"mappings":"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","debugId":null}},
    {"offset": {"line": 2836, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/note/index.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\nimport { Pitch } from \"@tonaljs/pitch\";\nimport { distance as _dist, transpose as _tr } from \"@tonaljs/pitch-distance\";\nimport { IntervalName } from \"@tonaljs/pitch-interval\";\nimport {\n  Note,\n  NoteLiteral,\n  NoteName,\n  note as props,\n} from \"@tonaljs/pitch-note\";\n\nexport type { NoteType } from \"@tonaljs/pitch-note\";\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = (n: Note) => n.name;\nconst onlyNotes = (array: any[]) =>\n  array.map(props).filter((n) => !n.empty) as Note[];\n\n/**\n * Return the natural note names without octave\n * @function\n * @example\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n */\nexport function names(array?: any[]): string[] {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n\n/**\n * Get a note from a note name\n *\n * @function\n * @example\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport const get = props;\n\n/**\n * Get the note name\n * @function\n */\nexport const name = (note: NoteLiteral) => get(note).name;\n\n/**\n * Get the note pitch class name\n * @function\n */\nexport const pitchClass = (note: NoteLiteral) => get(note).pc;\n\n/**\n * Get the note accidentals\n * @function\n */\nexport const accidentals = (note: NoteLiteral) => get(note).acc;\n\n/**\n * Get the note octave\n * @function\n */\nexport const octave = (note: NoteLiteral) => get(note).oct;\n\n/**\n * Get the note midi\n * @function\n */\nexport const midi = (note: NoteLiteral) => get(note).midi;\n\n/**\n * Get the note midi\n * @function\n */\nexport const freq = (note: NoteLiteral) => get(note).freq;\n\n/**\n * Get the note chroma\n * @function\n */\nexport const chroma = (note: NoteLiteral) => get(note).chroma;\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(midi: number) {\n  return midiToNoteName(midi);\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreq(freq: number) {\n  return midiToNoteName(freqToMidi(freq));\n}\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreqSharps(freq: number) {\n  return midiToNoteName(freqToMidi(freq), { sharps: true });\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidiSharps(61) // => \"C#4\"\n */\n\nexport function fromMidiSharps(midi: number) {\n  return midiToNoteName(midi, { sharps: true });\n}\n\nexport const distance = _dist;\n\n/**\n * Transpose a note by an interval\n */\nexport const transpose = _tr;\nexport const tr = _tr;\n\n/**\n * Transpose by an interval.\n * @function\n * @param {string} interval\n * @return {function} a function that transposes by the given interval\n * @example\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n * // => [\"G\", \"A\", \"B\"]\n */\nexport const transposeBy = (interval: IntervalName) => (note: NoteName) =>\n  transpose(note, interval);\nexport const trBy = transposeBy;\n\n/**\n * Transpose from a note\n * @function\n * @param {string} note\n * @return {function}  a function that transposes the the note by an interval\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n * // => [\"C\", \"E\", \"G\"]\n */\nexport const transposeFrom = (note: NoteName) => (interval: IntervalName) =>\n  transpose(note, interval);\nexport const trFrom = transposeFrom;\n\n/**\n * Transpose a note by a number of perfect fifths.\n *\n * @function\n * @param {string} note - the note name\n * @param {number} fifths - the number of fifths\n * @return {string} the transposed note name\n *\n * @example\n * import { transposeFifths } from \"@tonaljs/note\"\n * transposeFifths(\"G4\", 1) // => \"D\"\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n */\nexport function transposeFifths(noteName: NoteName, fifths: number): NoteName {\n  return transpose(noteName, [fifths, 0]);\n}\nexport const trFifths = transposeFifths;\n\n// TODO: documentation\nexport function transposeOctaves(\n  noteName: NoteName,\n  octaves: number,\n): NoteName {\n  return transpose(noteName, [0, octaves]);\n}\n\nexport type NoteComparator = (a: Note, b: Note) => number;\n\nexport const ascending: NoteComparator = (a, b) => a.height - b.height;\nexport const descending: NoteComparator = (a, b) => b.height - a.height;\n\nexport function sortedNames(\n  notes: any[],\n  comparator?: NoteComparator,\n): string[] {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nexport function sortedUniqNames(notes: any[]): string[] {\n  return sortedNames(notes, ascending).filter(\n    (n, i, a) => i === 0 || n !== a[i - 1],\n  );\n}\n\n/**\n * Simplify a note\n *\n * @function\n * @param {string} note - the note to be simplified\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplified note or '' if not valid note\n * @example\n * simplify(\"C##\") // => \"D\"\n * simplify(\"C###\") // => \"D#\"\n * simplify(\"C###\")\n * simplify(\"B#4\") // => \"C5\"\n */\nexport const simplify = (noteName: NoteName | Pitch): string => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null,\n  });\n};\n/**\n * Get enharmonic of a note\n *\n * @function\n * @param {string} note\n * @param [string] - [optional] Destination pitch class\n * @return {string} the enharmonic note name or '' if not valid note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enharmonic(\"C\") // => \"C\"\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\n * Note.enharmonic(\"C##b\"); // => \"\"\n */\nexport function enharmonic(noteName: string, destName?: string) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n\n  // destination: use given or generate one\n  const dest = get(\n    destName ||\n      midiToNoteName(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true,\n      }),\n  );\n\n  // ensure destination is valid\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n\n  // if src has no octave, no need to calculate anything else\n  if (src.oct === undefined) {\n    return dest.pc;\n  }\n\n  // detect any octave overflow\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset =\n    srcChroma > 11 || destChroma < 0\n      ? -1\n      : srcChroma < 0 || destChroma > 11\n        ? +1\n        : 0;\n  // calculate the new octave\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\n\n/** @deprecated */\nexport default {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  distance,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic,\n};\n"],"names":["midi","freq"],"mappings":"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","debugId":null}},
    {"offset": {"line": 3046, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/roman-numeral/index.ts"],"sourcesContent":["import { isNamedPitch, isPitch, Pitch } from \"@tonaljs/pitch\";\nimport { interval } from \"@tonaljs/pitch-interval\";\nimport { accToAlt, altToAcc } from \"@tonaljs/pitch-note\";\n\nexport interface RomanNumeral extends Pitch {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly roman: string;\n  readonly interval: string;\n  readonly acc: string;\n  readonly chordType: string;\n  readonly major: boolean;\n  readonly dir: 1;\n}\n\nexport interface NoRomanNumeral extends Partial<RomanNumeral> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly chordType: \"\";\n}\nconst NoRomanNumeral: NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\n\nconst cache: Record<string, RomanNumeral | NoRomanNumeral> = {};\n\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n * @param {string} name - the roman numeral (tonic)\n * @param {string} type - the chord type\n * @param {string} num - the number (1 = I, 2 = II...)\n * @param {boolean} major - major or not\n *\n * @example\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function get(src: any): RomanNumeral | NoRomanNumeral {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : typeof src === \"number\"\n      ? get(NAMES[src] || \"\")\n      : isPitch(src)\n        ? fromPitch(src)\n        : isNamedPitch(src)\n          ? get(src.name)\n          : NoRomanNumeral;\n}\n\n/**\n * @deprecated\n * @use RomanNumeral.get\n */\nexport const romanNumeral = get;\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n */\nexport function names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch: Pitch): RomanNumeral | NoRomanNumeral {\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX =\n  /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\n// [name, accidentals, romanNumeral, chordType]\ntype RomanNumeralTokens = [string, string, string, string];\nexport function tokenize(str: string): RomanNumeralTokens {\n  return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]) as RomanNumeralTokens;\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src: string): RomanNumeral | NoRomanNumeral {\n  const [name, acc, roman, chordType] = tokenize(src);\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = accToAlt(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: interval({ step, alt, dir }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir,\n  };\n}\n\n/** @deprecated */\nexport default {\n  names,\n  get,\n  // deprecated\n  romanNumeral,\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,SAAS,cAAc,eAAsB;AAC7C,SAAS,gBAAgB;AACzB,SAAS,UAAU,gBAAgB;;;;AAkBnC,IAAM,iBAAiC;IAAE,OAAO;IAAM,MAAM;IAAI,WAAW;AAAG;AAE9E,IAAM,QAAuD,CAAC;AAiBvD,SAAS,IAAI,GAAA,EAAyC;IAC3D,OAAO,OAAO,QAAQ,WAClB,KAAA,CAAM,GAAG,CAAA,IAAA,CAAM,KAAA,CAAM,GAAG,CAAA,GAAI,MAAM,GAAG,CAAA,IACrC,OAAO,QAAQ,WACb,IAAI,KAAA,CAAM,GAAG,CAAA,IAAK,EAAE,QACpB,+JAAA,EAAQ,GAAG,IACT,UAAU,GAAG,QACb,oKAAA,EAAa,GAAG,IACd,IAAI,IAAI,IAAI,IACZ;AACZ;AAMO,IAAM,eAAe;AAYrB,SAAS,MAAM,QAAQ,IAAA,EAAM;IAClC,OAAA,CAAQ,QAAQ,QAAQ,WAAA,EAAa,KAAA,CAAM;AAC7C;AAEA,SAAS,UAAU,KAAA,EAA6C;IAC9D,OAAO,QAAI,wKAAA,EAAS,MAAM,GAAG,IAAI,KAAA,CAAM,MAAM,IAAI,CAAC;AACpD;AAEA,IAAM,QACJ;AAIK,SAAS,SAAS,GAAA,EAAiC;IACxD,OAAQ,MAAM,IAAA,CAAK,GAAG,KAAK;QAAC;QAAI;QAAI;QAAI,EAAE;KAAA;AAC5C;AAEA,IAAM,SAAS;AACf,IAAM,QAAQ,OAAO,KAAA,CAAM,GAAG;AAC9B,IAAM,cAAc,OAAO,WAAA,CAAY,EAAE,KAAA,CAAM,GAAG;AAElD,SAAS,MAAM,GAAA,EAA4C;IACzD,MAAM,CAAC,MAAM,KAAK,OAAO,SAAS,CAAA,GAAI,SAAS,GAAG;IAClD,IAAI,CAAC,OAAO;QACV,OAAO;IACT;IAEA,MAAM,aAAa,MAAM,WAAA,CAAY;IACrC,MAAM,OAAO,MAAM,OAAA,CAAQ,UAAU;IACrC,MAAM,UAAM,wKAAA,EAAS,GAAG;IACxB,MAAM,MAAM;IACZ,OAAO;QACL,OAAO;QACP;QACA;QACA,cAAU,4KAAA,EAAS;YAAE;YAAM;YAAK;QAAI,CAAC,EAAE,IAAA;QACvC;QACA;QACA;QACA;QACA,OAAO,UAAU;QACjB,KAAK;QACL;IACF;AACF;AAGA,IAAO,wBAAQ;IACb;IACA;IAAA,aAAA;IAEA;AACF","debugId":null}},
    {"offset": {"line": 3132, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/key/index.ts"],"sourcesContent":["import { transpose, transposeFifths } from \"@tonaljs/note\";\nimport { accToAlt, altToAcc, note } from \"@tonaljs/pitch-note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantSupertonics: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantSupertonics: readonly string[];\n\n  // @deprecated use secondaryDominantsSupertonic\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  // @deprecated use substituteDominantSupertonics\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantSupertonics: Empty,\n  substituteDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantSupertonics: Empty,\n  secondaryDominantsMinorRelative: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly secondaryDominantSupertonics: readonly string[];\n  // @deprecated use secondaryDominantsSupertonic\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  substituteDominants: Empty,\n  secondaryDominantSupertonics: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nexport type KeyChord = {\n  name: string;\n  roles: string[];\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chordTypes: string[],\n  harmonicFunctions: string[],\n  chordScales: string[],\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n    const chords = mapScaleToType(scale, chordTypes);\n    const secondaryDominants = scale\n      .map((note) => transpose(note, \"5P\"))\n      .map((note) =>\n        // A secondary dominant is a V chord which:\n        // 1. is not diatonic to the key,\n        // 2. it must have a diatonic root.\n        scale.includes(note) && !chords.includes(note + \"7\") ? note + \"7\" : \"\",\n      );\n\n    const secondaryDominantSupertonics = supertonics(\n      secondaryDominants,\n      triads,\n    );\n    const substituteDominants = secondaryDominants.map((chord) => {\n      if (!chord) return \"\";\n      const domRoot = chord.slice(0, -1);\n      const subRoot = transpose(domRoot, \"5d\");\n      return subRoot + \"7\";\n    });\n    const substituteDominantSupertonics = supertonics(\n      substituteDominants,\n      triads,\n    );\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords,\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n      secondaryDominants,\n      secondaryDominantSupertonics,\n      substituteDominants,\n      substituteDominantSupertonics,\n\n      // @deprecated use secondaryDominantsSupertonic\n      secondaryDominantsMinorRelative: secondaryDominantSupertonics,\n      // @deprecated use secondaryDominantsSupertonic\n      substituteDominantsMinorRelative: substituteDominantSupertonics,\n    };\n  };\n}\n\nconst supertonics = (dominants: string[], targetTriads: string[]) => {\n  return dominants.map((chord, index) => {\n    if (!chord) return \"\";\n    const domRoot = chord.slice(0, -1);\n    const minorRoot = transpose(domRoot, \"5P\");\n    const target = targetTriads[index];\n    const isMinor = target.endsWith(\"m\");\n    return isMinor ? minorRoot + \"m7\" : minorRoot + \"m7b5\";\n  });\n};\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"),\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"),\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\",\n  ),\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\",\n  ),\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n  };\n}\n\n/**\n * Get a list of available chords for a given major key\n * @param tonic\n * @returns array of { name: string, roles: string[] }\n */\nexport function majorKeyChords(tonic: string): KeyChord[] {\n  const key = majorKey(tonic);\n  const chords: KeyChord[] = [];\n  keyChordsOf(key, chords);\n  return chords;\n}\n\n/**\n * Get a list of available chords for a given major key\n * @param tonic\n * @returns array of { name: string, roles: string[] }\n */\nexport function minorKeyChords(tonic: string): KeyChord[] {\n  const key = minorKey(tonic);\n  const chords: KeyChord[] = [];\n  keyChordsOf(key.natural, chords);\n  keyChordsOf(key.harmonic, chords);\n  keyChordsOf(key.melodic, chords);\n  return chords;\n}\n\nfunction keyChordsOf(key: KeyScale, chords: KeyChord[]) {\n  const updateChord = (name: string, newRole: string) => {\n    if (!name) return;\n    let keyChord = chords.find((chord) => chord.name === name);\n    if (!keyChord) {\n      keyChord = { name, roles: [] };\n      chords.push(keyChord);\n    }\n    if (newRole && !keyChord.roles.includes(newRole)) {\n      keyChord.roles.push(newRole);\n    }\n  };\n\n  key.chords.forEach((chordName, index) =>\n    updateChord(chordName, key.chordsHarmonicFunction[index]),\n  );\n  key.secondaryDominants.forEach((chordName, index) =>\n    updateChord(chordName, `V/${key.grades[index]}`),\n  );\n  key.secondaryDominantSupertonics.forEach((chordName, index) =>\n    updateChord(chordName, `ii/${key.grades[index]}`),\n  );\n  key.substituteDominants.forEach((chordName, index) =>\n    updateChord(chordName, `subV/${key.grades[index]}`),\n  );\n  key.substituteDominantSupertonics.forEach((chordName, index) =>\n    updateChord(chordName, `subii/${key.grades[index]}`),\n  );\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param signature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number,\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\n/** @deprecated */\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n"],"names":["note","keyScale"],"mappings":"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","debugId":null}},
    {"offset": {"line": 3333, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/mode/index.ts"],"sourcesContent":["import { rotate } from \"@tonaljs/collection\";\nimport { simplify, transposeFifths } from \"@tonaljs/interval\";\nimport { EmptyPcset, Pcset } from \"@tonaljs/pcset\";\nimport { transpose } from \"@tonaljs/pitch-distance\";\nimport { NoteName } from \"@tonaljs/pitch-note\";\nimport { get as getType } from \"@tonaljs/scale-type\";\n\nconst MODES = [\n  [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\n  [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\n  [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\n  [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\n  [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\n  [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\n  [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\n] as const;\n\ntype ModeDatum = (typeof MODES)[number];\n\nexport interface Mode extends Pcset {\n  readonly name: string;\n  readonly modeNum: number;\n  readonly alt: number; // number of alterations === number of fifths\n  readonly triad: string;\n  readonly seventh: string;\n  readonly aliases: string[];\n}\n\nconst NoMode: Mode = {\n  ...EmptyPcset,\n  name: \"\",\n  alt: 0,\n  modeNum: NaN,\n  triad: \"\",\n  seventh: \"\",\n  aliases: [],\n};\n\nconst modes: Mode[] = MODES.map(toMode);\nconst index: Record<string, Mode> = {};\nmodes.forEach((mode) => {\n  index[mode.name] = mode;\n  mode.aliases.forEach((alias) => {\n    index[alias] = mode;\n  });\n});\n\ntype ModeLiteral = string | { name: string };\n\n/**\n * Get a Mode by it's name\n *\n * @example\n * get('dorian')\n * // =>\n * // {\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\n * //   modeNum: 1,\n * //   chroma: '101101010110',\n * //   normalized: '101101010110',\n * //   name: 'dorian',\n * //   setNum: 2902,\n * //   alt: 2,\n * //   triad: 'm',\n * //   seventh: 'm7',\n * //   aliases: []\n * // }\n */\nexport function get(name: ModeLiteral): Mode {\n  return typeof name === \"string\"\n    ? index[name.toLowerCase()] || NoMode\n    : name && name.name\n      ? get(name.name)\n      : NoMode;\n}\n\n/** @deprecated */\nexport const mode = get;\n\n/**\n * Get a list of all modes\n */\nexport function all() {\n  return modes.slice();\n}\n\n/** @deprecated */\nexport const entries = all;\n\n/**\n * Get a list of all mode names\n */\nexport function names() {\n  return modes.map((mode) => mode.name);\n}\n\nfunction toMode(mode: ModeDatum): Mode {\n  const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\n  const aliases = alias ? [alias] : [];\n  const chroma = Number(setNum).toString(2);\n  const intervals = getType(name).intervals;\n  return {\n    empty: false,\n    intervals,\n    modeNum,\n    chroma,\n    normalized: chroma,\n    name,\n    setNum,\n    alt,\n    triad,\n    seventh,\n    aliases,\n  };\n}\n\nexport function notes(modeName: ModeLiteral, tonic: NoteName) {\n  return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\n}\n\nfunction chords(chords: string[]) {\n  return (modeName: ModeLiteral, tonic: NoteName) => {\n    const mode = get(modeName);\n    if (mode.empty) return [];\n    const triads = rotate(mode.modeNum, chords);\n    const tonics = mode.intervals.map((i) => transpose(tonic, i));\n    return triads.map((triad, i) => tonics[i] + triad);\n  };\n}\n\nexport const triads = chords(MODES.map((x) => x[4]));\nexport const seventhChords = chords(MODES.map((x) => x[5]));\n\nexport function distance(destination: ModeLiteral, source: ModeLiteral) {\n  const from = get(source);\n  const to = get(destination);\n  if (from.empty || to.empty) return \"\";\n  return simplify(transposeFifths(\"1P\", to.alt - from.alt));\n}\n\nexport function relativeTonic(\n  destination: ModeLiteral,\n  source: ModeLiteral,\n  tonic: NoteName,\n) {\n  return transpose(tonic, distance(destination, source));\n}\n\n/** @deprecated */\nexport default {\n  get,\n  names,\n  all,\n  distance,\n  relativeTonic,\n  notes,\n  triads,\n  seventhChords,\n  // deprecated\n  entries,\n  mode,\n};\n"],"names":["mode","chords","triads"],"mappings":"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","debugId":null}},
    {"offset": {"line": 3519, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/progression/index.ts"],"sourcesContent":["import { tokenize } from \"@tonaljs/chord\";\nimport { distance, transpose } from \"@tonaljs/pitch-distance\";\nimport { interval } from \"@tonaljs/pitch-interval\";\nimport { NoteLiteral } from \"@tonaljs/pitch-note\";\nimport { get as romanNumeral } from \"@tonaljs/roman-numeral\";\n\n/**\n * Given a tonic and a chord list expressed with roman numeral notation\n * returns the progression expressed with leadsheet chords symbols notation\n * @example\n * fromRomanNumerals(\"C\", [\"I\", \"IIm7\", \"V7\"]);\n * // => [\"C\", \"Dm7\", \"G7\"]\n */\nexport function fromRomanNumerals(\n  tonic: NoteLiteral,\n  chords: string[],\n): string[] {\n  const romanNumerals = chords.map(romanNumeral);\n  return romanNumerals.map(\n    (rn) => transpose(tonic, interval(rn)) + rn.chordType,\n  );\n}\n\n/**\n * Given a tonic and a chord list with leadsheet symbols notation,\n * return the chord list with roman numeral notation\n * @example\n * toRomanNumerals(\"C\", [\"CMaj7\", \"Dm7\", \"G7\"]);\n * // => [\"IMaj7\", \"IIm7\", \"V7\"]\n */\nexport function toRomanNumerals(\n  tonic: NoteLiteral,\n  chords: string[],\n): string[] {\n  return chords.map((chord) => {\n    const [note, chordType] = tokenize(chord);\n    const intervalName = distance(tonic, note);\n    const roman = romanNumeral(interval(intervalName));\n    return roman.name + chordType;\n  });\n}\n\n/** @deprecated */\nexport default { fromRomanNumerals, toRomanNumerals };\n"],"names":[],"mappings":";;;;;;;;;AAAA,SAAS,gBAAgB;AACzB,SAAS,UAAU,iBAAiB;AACpC,SAAS,gBAAgB;AAEzB,SAAS,OAAO,oBAAoB;;;;;AAS7B,SAAS,kBACd,KAAA,EACA,MAAA,EACU;IACV,MAAM,gBAAgB,OAAO,GAAA,CAAI,sKAAY;IAC7C,OAAO,cAAc,GAAA,CACnB,CAAC,SAAO,6KAAA,EAAU,WAAO,4KAAA,EAAS,EAAE,CAAC,IAAI,GAAG,SAAA;AAEhD;AASO,SAAS,gBACd,KAAA,EACA,MAAA,EACU;IACV,OAAO,OAAO,GAAA,CAAI,CAAC,UAAU;QAC3B,MAAM,CAAC,MAAM,SAAS,CAAA,OAAI,gLAAA,EAAS,KAAK;QACxC,MAAM,mBAAe,4KAAA,EAAS,OAAO,IAAI;QACzC,MAAM,YAAQ,sKAAA,MAAa,4KAAA,EAAS,YAAY,CAAC;QACjD,OAAO,MAAM,IAAA,GAAO;IACtB,CAAC;AACH;AAGA,IAAO,sBAAQ;IAAE;IAAmB;AAAgB","debugId":null}},
    {"offset": {"line": 3558, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/range/index.ts"],"sourcesContent":["import { compact, range } from \"@tonaljs/collection\";\nimport { midiToNoteName, toMidi, ToNoteNameOptions } from \"@tonaljs/midi\";\n\n/**\n * Create a numeric range. You supply a list of notes or numbers and it will\n * be connected to create complex ranges.\n *\n * @param {Array} notes - the list of notes or midi numbers used\n * @return {Array} an array of numbers or empty array if not valid parameters\n *\n * @example\n * numeric([\"C5\", \"C4\"]) // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]\n * // it works midi notes\n * numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]\n * // complex range\n * numeric([\"C4\", \"E4\", \"Bb3\"]) // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]\n */\nexport function numeric(notes: (string | number)[]): number[] {\n  const midi: number[] = compact(\n    notes.map((note) => (typeof note === \"number\" ? note : toMidi(note))),\n  );\n  if (!notes.length || midi.length !== notes.length) {\n    // there is no valid notes\n    return [];\n  }\n\n  return midi.reduce(\n    (result, note) => {\n      const last: number = result[result.length - 1];\n      return result.concat(range(last, note).slice(1));\n    },\n    [midi[0]],\n  );\n}\n\n/**\n * Create a range of chromatic notes. The altered notes will use flats.\n *\n * @function\n * @param {Array} notes - the list of notes or midi note numbers to create a range from\n * @param {Object} options - The same as `midiToNoteName` (`{ sharps: boolean, pitchClass: boolean }`)\n * @return {Array} an array of note names\n *\n * @example\n * Range.chromatic([\"C2, \"E2\", \"D2\"]) // => [\"C2\", \"Db2\", \"D2\", \"Eb2\", \"E2\", \"Eb2\", \"D2\"]\n * // with sharps\n * Range.chromatic([\"C2\", \"C3\"], { sharps: true }) // => [ \"C2\", \"C#2\", \"D2\", \"D#2\", \"E2\", \"F2\", \"F#2\", \"G2\", \"G#2\", \"A2\", \"A#2\", \"B2\", \"C3\" ]\n */\nexport function chromatic(\n  notes: (string | number)[],\n  options?: ToNoteNameOptions,\n): string[] {\n  return numeric(notes).map((midi) => midiToNoteName(midi, options));\n}\n\n/** @deprecated */\nexport default { numeric, chromatic };\n"],"names":[],"mappings":";;;;;;;;;AAAA,SAAS,SAAS,aAAa;AAC/B,SAAS,gBAAgB,cAAiC;;;AAgBnD,SAAS,QAAQ,KAAA,EAAsC;IAC5D,MAAM,WAAiB,oKAAA,EACrB,MAAM,GAAA,CAAI,CAAC,OAAU,OAAO,SAAS,WAAW,WAAO,6JAAA,EAAO,IAAI,CAAE;IAEtE,IAAI,CAAC,MAAM,MAAA,IAAU,KAAK,MAAA,KAAW,MAAM,MAAA,EAAQ;QAEjD,OAAO,CAAC,CAAA;IACV;IAEA,OAAO,KAAK,MAAA,CACV,CAAC,QAAQ,SAAS;QAChB,MAAM,OAAe,MAAA,CAAO,OAAO,MAAA,GAAS,CAAC,CAAA;QAC7C,OAAO,OAAO,MAAA,KAAO,kKAAA,EAAM,MAAM,IAAI,EAAE,KAAA,CAAM,CAAC,CAAC;IACjD,GACA;QAAC,IAAA,CAAK,CAAC,CAAC;KAAA;AAEZ;AAeO,SAAS,UACd,KAAA,EACA,OAAA,EACU;IACV,OAAO,QAAQ,KAAK,EAAE,GAAA,CAAI,CAAC,OAAS,2KAAe,MAAM,OAAO,CAAC;AACnE;AAGA,IAAO,gBAAQ;IAAE;IAAS;AAAU","debugId":null}},
    {"offset": {"line": 3596, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/rhythm-pattern/index.ts"],"sourcesContent":["type RhythmPatternValue = 0 | 1;\n\nexport type RhythmPattern = Array<RhythmPatternValue>;\n\n/**\n * Create a rhythm pattern from a number or concatenation of numbers in binary form\n * @param numbers one or more number\n * @returns an array of 0s and 1s representing the rhythm pattern\n * @example\n * binary(13) // => [1, 1, 0, 1]\n * binary(12, 13) // => [1, 1, 0, 0, 1, 1, 0, 1]\n */\nexport function binary(...numbers: number[]): RhythmPattern {\n  return numbers.reduce((pattern, number) => {\n    number\n      .toString(2)\n      .split(\"\")\n      .forEach((digit: string) => {\n        pattern.push(parseInt(digit) as RhythmPatternValue);\n      });\n    return pattern;\n  }, [] as RhythmPattern);\n}\n\n/**\n * Create a rhythmic pattern using an hexadecimal numbers\n * @param hexNumber string with the hexadecimal number\n * @returns an array of 0s and 1s representing the rhythm pattern\n * @example\n * R.hex(\"8f\"); // => [1, 0, 0, 0, 1, 1, 1, 1]\n */\nexport function hex(hexNumber: string): RhythmPattern {\n  const pattern: RhythmPattern = [];\n  for (let i = 0; i < hexNumber.length; i++) {\n    const digit = parseInt(\"0x\" + hexNumber[i]);\n    const binary = isNaN(digit) ? \"0000\" : digit.toString(2).padStart(4, \"0\");\n    binary.split(\"\").forEach((digit: string) => {\n      pattern.push(digit === \"1\" ? 1 : 0);\n    });\n  }\n  return pattern;\n}\n\n/**\n * Create a rhythm pattern from the onsets\n * @param numbers the onsets sizes\n * @returns an array of 0s and 1s representing the rhythm pattern\n * @example\n * onsets(1, 2, 2, 1) // => [1, 0, 1, 0, 0, 1, 0, 0, 1, 0]\n */\nexport function onsets(...numbers: number[]): RhythmPattern {\n  return numbers.reduce((pattern, number) => {\n    pattern.push(1);\n    for (let i = 0; i < number; i++) {\n      pattern.push(0);\n    }\n    return pattern;\n  }, [] as RhythmPattern);\n}\n\n/**\n * Create a random rhythm pattern with a specified length\n * @param length length of the pattern\n * @param probability Threshold where random number is considered a beat (defaults to 0.5)\n * @param rnd A random function (Math.random by default)\n * @returns an array of 0s and 1s representing the rhythm pattern\n * @example\n * random(4) // => [1, 0, 0, 1]\n */\nexport function random(\n  length: number,\n  probability = 0.5,\n  rnd: () => number = Math.random,\n): RhythmPattern {\n  const pattern: RhythmPattern = [];\n  for (let i = 0; i < length; i++) {\n    pattern.push(rnd() >= probability ? 1 : 0);\n  }\n  return pattern;\n}\n\n/**\n * Create a rhythm pattern based on the given probability thresholds\n * @param probabilities An array with the probability of each step to be a beat\n * @param rnd A random function (Math.random by default)\n * @returns an array of 0s and 1s representing the rhythm pattern\n * @example\n * probability([0.6, 0, 0.2, 0.5]) // => [0, 0, 0, 1]\n */\nexport function probability(\n  probabilities: number[],\n  rnd: () => number = Math.random,\n): RhythmPattern {\n  return probabilities.map((probability) => (rnd() <= probability ? 1 : 0));\n}\n\n/**\n * Rotate a pattern right\n * @param pattern the pattern to rotate\n * @param rotations the number of steps to rotate\n * @returns the rotated pattern (an array of 0s and 1s)\n * @example\n * rotate([1, 0, 0, 1], 2); // => [0, 1, 1, 0]\n *\n */\nexport function rotate(\n  pattern: RhythmPattern,\n  rotations: number,\n): RhythmPattern {\n  const len = pattern.length;\n  const rotated: RhythmPattern = [];\n  for (let i = 0; i < len; i++) {\n    const pos = (((i - rotations) % len) + len) % len;\n    rotated[i] = pattern[pos];\n  }\n  return rotated;\n}\n\n/**\n * Generates an euclidean rhythm pattern\n * @param steps The length of the pattern\n * @param beats The number of beats\n * @returns an array with 0s and 1s representing the rhythmic pattern\n * @example\n * euclid(8, 3); // => [1, 0, 0, 1, 0, 0, 1, 0]\n */\nexport function euclid(steps: number, beats: number): RhythmPattern {\n  const pattern: RhythmPattern = [];\n  let d = -1;\n\n  for (let i = 0; i < steps; i++) {\n    const v = Math.floor(i * (beats / steps));\n    pattern[i] = v !== d ? 1 : 0;\n    d = v;\n  }\n  return pattern;\n}\n"],"names":["binary","digit","probability"],"mappings":";;;;;;;;;;;;;;;;;AAYO,SAAS,OAAA,GAAU,OAAA,EAAkC;IAC1D,OAAO,QAAQ,MAAA,CAAO,CAAC,SAAS,WAAW;QACzC,OACG,QAAA,CAAS,CAAC,EACV,KAAA,CAAM,EAAE,EACR,OAAA,CAAQ,CAAC,UAAkB;YAC1B,QAAQ,IAAA,CAAK,SAAS,KAAK,CAAuB;QACpD,CAAC;QACH,OAAO;IACT,GAAG,CAAC,CAAkB;AACxB;AASO,SAAS,IAAI,SAAA,EAAkC;IACpD,MAAM,UAAyB,CAAC,CAAA;IAChC,IAAA,IAAS,IAAI,GAAG,IAAI,UAAU,MAAA,EAAQ,IAAK;QACzC,MAAM,QAAQ,SAAS,OAAO,SAAA,CAAU,CAAC,CAAC;QAC1C,MAAMA,UAAS,MAAM,KAAK,IAAI,SAAS,MAAM,QAAA,CAAS,CAAC,EAAE,QAAA,CAAS,GAAG,GAAG;QACxEA,QAAO,KAAA,CAAM,EAAE,EAAE,OAAA,CAAQ,CAACC,WAAkB;YAC1C,QAAQ,IAAA,CAAKA,WAAU,MAAM,IAAI,CAAC;QACpC,CAAC;IACH;IACA,OAAO;AACT;AASO,SAAS,OAAA,GAAU,OAAA,EAAkC;IAC1D,OAAO,QAAQ,MAAA,CAAO,CAAC,SAAS,WAAW;QACzC,QAAQ,IAAA,CAAK,CAAC;QACd,IAAA,IAAS,IAAI,GAAG,IAAI,QAAQ,IAAK;YAC/B,QAAQ,IAAA,CAAK,CAAC;QAChB;QACA,OAAO;IACT,GAAG,CAAC,CAAkB;AACxB;AAWO,SAAS,OACd,MAAA,EACAC,eAAc,GAAA,EACd,MAAoB,KAAK,MAAA,EACV;IACf,MAAM,UAAyB,CAAC,CAAA;IAChC,IAAA,IAAS,IAAI,GAAG,IAAI,QAAQ,IAAK;QAC/B,QAAQ,IAAA,CAAK,IAAI,KAAKA,eAAc,IAAI,CAAC;IAC3C;IACA,OAAO;AACT;AAUO,SAAS,YACd,aAAA,EACA,MAAoB,KAAK,MAAA,EACV;IACf,OAAO,cAAc,GAAA,CAAI,CAACA,eAAiB,IAAI,KAAKA,eAAc,IAAI,CAAE;AAC1E;AAWO,SAAS,OACd,OAAA,EACA,SAAA,EACe;IACf,MAAM,MAAM,QAAQ,MAAA;IACpB,MAAM,UAAyB,CAAC,CAAA;IAChC,IAAA,IAAS,IAAI,GAAG,IAAI,KAAK,IAAK;QAC5B,MAAM,MAAA,CAAA,CAAS,IAAI,SAAA,IAAa,MAAO,GAAA,IAAO;QAC9C,OAAA,CAAQ,CAAC,CAAA,GAAI,OAAA,CAAQ,GAAG,CAAA;IAC1B;IACA,OAAO;AACT;AAUO,SAAS,OAAO,KAAA,EAAe,KAAA,EAA8B;IAClE,MAAM,UAAyB,CAAC,CAAA;IAChC,IAAI,IAAI,CAAA;IAER,IAAA,IAAS,IAAI,GAAG,IAAI,OAAO,IAAK;QAC9B,MAAM,IAAI,KAAK,KAAA,CAAM,IAAA,CAAK,QAAQ,KAAA,CAAM;QACxC,OAAA,CAAQ,CAAC,CAAA,GAAI,MAAM,IAAI,IAAI;QAC3B,IAAI;IACN;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 3676, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/scale/index.ts"],"sourcesContent":["/**\n * References:\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\n * @module scale\n */\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\nimport { range as nums, rotate } from \"@tonaljs/collection\";\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\nimport {\n  chroma,\n  isChroma,\n  isSubsetOf,\n  isSupersetOf,\n  modes,\n} from \"@tonaljs/pcset\";\nimport { tonicIntervalsTransposer, transpose } from \"@tonaljs/pitch-distance\";\nimport { note, NoteName } from \"@tonaljs/pitch-note\";\nimport {\n  all,\n  get as getScaleType,\n  ScaleType,\n  names as scaleTypeNames,\n  all as scaleTypes,\n} from \"@tonaljs/scale-type\";\n\ntype ScaleName = string;\ntype ScaleNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Scale extends ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: NoteName[];\n}\n\nconst NoScale: Scale = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It returns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn't check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * tokenize(\"C mixolydian\") // => [\"C\", \"mixolydian\"]\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(name: ScaleName): ScaleNameTokens {\n  if (typeof name !== \"string\") {\n    return [\"\", \"\"];\n  }\n  const i = name.indexOf(\" \");\n  const tonic = note(name.substring(0, i));\n  if (tonic.empty) {\n    const n = note(name);\n    return n.empty ? [\"\", name.toLowerCase()] : [n.name, \"\"];\n  }\n\n  const type = name.substring(tonic.name.length + 1).toLowerCase();\n  return [tonic.name, type.length ? type : \"\"];\n}\n\n/**\n * Get all scale names\n * @function\n */\nexport const names = scaleTypeNames;\n\n/**\n * Get a Scale from a scale name.\n */\nexport function get(src: ScaleName | ScaleNameTokens): Scale {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = note(tokens[0]).name;\n  const st = getScaleType(tokens[1]);\n  if (st.empty) {\n    return NoScale;\n  }\n\n  const type = st.name;\n  const notes: string[] = tonic\n    ? st.intervals.map((i) => transpose(tonic, i))\n    : [];\n\n  const name = tonic ? tonic + \" \" + type : type;\n\n  return { ...st, name, type, tonic, notes };\n}\n\n/**\n * @deprecated\n * @use Scale.get\n */\nexport const scale = get;\n\nexport function detect(\n  notes: string[],\n  options: { tonic?: string; match?: \"exact\" | \"fit\" } = {},\n): string[] {\n  const notesChroma = chroma(notes);\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\n  const tonicChroma = tonic.chroma;\n  if (tonicChroma === undefined) {\n    return [];\n  }\n\n  const pitchClasses = notesChroma.split(\"\");\n  pitchClasses[tonicChroma] = \"1\";\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\n\n  const results: string[] = [];\n  if (match) {\n    results.push(tonic.name + \" \" + match.name);\n  }\n  if (options.match === \"exact\") {\n    return results;\n  }\n\n  extended(scaleChroma).forEach((scaleName) => {\n    results.push(tonic.name + \" \" + scaleName);\n  });\n\n  return results;\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function scaleChords(name: string): string[] {\n  const s = get(name);\n  const inScale = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => inScale(chord.chroma))\n    .map((chord) => chord.aliases[0]);\n}\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function extended(name: string): string[] {\n  const chroma = isChroma(name) ? name : get(name).chroma;\n  const isSuperset = isSupersetOf(chroma);\n  return scaleTypes()\n    .filter((scale) => isSuperset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function reduced(name: string): string[] {\n  const isSubset = isSubsetOf(get(name).chroma);\n  return scaleTypes()\n    .filter((scale) => isSubset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {string[]} notes\n * @return {string[]} pitch classes with same tonic\n * @example\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function scaleNotes(notes: NoteName[]) {\n  const pcset: string[] = notes.map((n) => note(n).pc).filter((x) => x);\n  const tonic = pcset[0];\n  const scale = sortedUniqNames(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\ntype ScaleMode = [string, string];\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name: string): ScaleMode[] {\n  const s = get(name);\n  if (s.empty) {\n    return [];\n  }\n\n  const tonics = s.tonic ? s.notes : s.intervals;\n  return modes(s.chroma)\n    .map((chroma: string, i: number): ScaleMode => {\n      const modeName = get(chroma).name;\n      return modeName ? [tonics[i], modeName] : [\"\", \"\"];\n    })\n    .filter((x) => x[0]);\n}\n\nfunction getNoteNameOf(scale: string | string[]) {\n  const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\n  const chromas = names.map((name) => note(name).chroma);\n\n  return (noteOrMidi: string | number): string | undefined => {\n    const currNote =\n      typeof noteOrMidi === \"number\"\n        ? note(fromMidi(noteOrMidi))\n        : note(noteOrMidi);\n    const height = currNote.height;\n\n    if (height === undefined) return undefined;\n    const chroma = height % 12;\n    const position = chromas.indexOf(chroma);\n    if (position === -1) return undefined;\n    return enharmonic(currNote.name, names[position]);\n  };\n}\n\nexport function rangeOf(scale: string | string[]) {\n  const getName = getNoteNameOf(scale);\n  return (fromNote: string, toNote: string) => {\n    const from = note(fromNote).height;\n    const to = note(toNote).height;\n    if (from === undefined || to === undefined) return [];\n\n    return nums(from, to)\n      .map(getName)\n      .filter((x) => x);\n  };\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n * [1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n */\nexport function degrees(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\n/** @deprecated */\nexport default {\n  degrees,\n  detect,\n  extended,\n  get,\n  modeNames,\n  names,\n  rangeOf,\n  reduced,\n  scaleChords,\n  scaleNotes,\n  steps,\n  tokenize,\n\n  // deprecated\n  scale,\n};\n"],"names":["chroma","scale","names","transpose"],"mappings":"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","debugId":null}},
    {"offset": {"line": 3891, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/time-signature/index.ts"],"sourcesContent":["// TYPES: PARSING\nexport type TimeSignatureLiteral = string | [number, number] | [string, string];\ntype ParsedTimeSignature = [number | number[], number];\n\n// TYPES: PROPERTIES\nexport type ValidTimeSignature = {\n  readonly empty: false;\n  readonly name: string;\n  readonly upper: number | number[];\n  readonly lower: number;\n  readonly type: \"simple\" | \"compound\" | \"irregular\" | \"irrational\";\n  readonly additive: number[];\n};\n\nexport type InvalidTimeSignature = {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly upper: undefined;\n  readonly lower: undefined;\n  readonly type: undefined;\n  readonly additive: [];\n};\n\nexport type TimeSignature = ValidTimeSignature | InvalidTimeSignature;\n\n// CONSTANTS\nconst NONE: InvalidTimeSignature = {\n  empty: true,\n  name: \"\",\n  upper: undefined,\n  lower: undefined,\n  type: undefined,\n  additive: [],\n};\n\nconst NAMES = [\"4/4\", \"3/4\", \"2/4\", \"2/2\", \"12/8\", \"9/8\", \"6/8\", \"3/8\"];\n\n// PUBLIC API\n\nexport function names() {\n  return NAMES.slice();\n}\n\nconst REGEX = /^(\\d*\\d(?:\\+\\d)*)\\/(\\d+)$/;\nconst CACHE = new Map<TimeSignatureLiteral, TimeSignature>();\n\nexport function get(literal: TimeSignatureLiteral): TimeSignature {\n  const stringifiedLiteral = JSON.stringify(literal);\n  const cached = CACHE.get(stringifiedLiteral);\n  if (cached) {\n    return cached;\n  }\n\n  const ts = build(parse(literal));\n  CACHE.set(stringifiedLiteral, ts);\n  return ts;\n}\n\nexport function parse(literal: TimeSignatureLiteral): ParsedTimeSignature {\n  if (typeof literal === \"string\") {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [_, up, low] = REGEX.exec(literal) || [];\n    return parse([up, low]);\n  }\n\n  const [up, down] = literal;\n  const denominator = +down;\n  if (typeof up === \"number\") {\n    return [up, denominator];\n  }\n\n  const list = up.split(\"+\").map((n) => +n);\n  return list.length === 1 ? [list[0], denominator] : [list, denominator];\n}\n\n/** @deprecated */\nexport default { names, parse, get };\n\n// PRIVATE\n\nconst isPowerOfTwo = (x: number) => (Math.log(x) / Math.log(2)) % 1 === 0;\n\nfunction build([up, down]: ParsedTimeSignature): TimeSignature {\n  const upper = Array.isArray(up) ? up.reduce((a, b) => a + b, 0) : up;\n  const lower = down;\n  if (upper === 0 || lower === 0) {\n    return NONE;\n  }\n\n  const name = Array.isArray(up) ? `${up.join(\"+\")}/${down}` : `${up}/${down}`;\n  const additive = Array.isArray(up) ? up : [];\n  const type =\n    lower === 4 || lower === 2\n      ? \"simple\"\n      : lower === 8 && upper % 3 === 0\n        ? \"compound\"\n        : isPowerOfTwo(lower)\n          ? \"irregular\"\n          : \"irrational\";\n\n  return {\n    empty: false,\n    name,\n    type,\n    upper,\n    lower,\n    additive,\n  };\n}\n"],"names":["up"],"mappings":";;;;;;;;;;;AA0BA,IAAM,OAA6B;IACjC,OAAO;IACP,MAAM;IACN,OAAO,KAAA;IACP,OAAO,KAAA;IACP,MAAM,KAAA;IACN,UAAU,CAAC,CAAA;AACb;AAEA,IAAM,QAAQ;IAAC;IAAO;IAAO;IAAO;IAAO;IAAQ;IAAO;IAAO,KAAK;CAAA;AAI/D,SAAS,QAAQ;IACtB,OAAO,MAAM,KAAA,CAAM;AACrB;AAEA,IAAM,QAAQ;AACd,IAAM,QAAQ,aAAA,GAAA,IAAI,IAAyC;AAEpD,SAAS,IAAI,OAAA,EAA8C;IAChE,MAAM,qBAAqB,KAAK,SAAA,CAAU,OAAO;IACjD,MAAM,SAAS,MAAM,GAAA,CAAI,kBAAkB;IAC3C,IAAI,QAAQ;QACV,OAAO;IACT;IAEA,MAAM,KAAK,MAAM,MAAM,OAAO,CAAC;IAC/B,MAAM,GAAA,CAAI,oBAAoB,EAAE;IAChC,OAAO;AACT;AAEO,SAAS,MAAM,OAAA,EAAoD;IACxE,IAAI,OAAO,YAAY,UAAU;QAE/B,MAAM,CAAC,GAAGA,KAAI,GAAG,CAAA,GAAI,MAAM,IAAA,CAAK,OAAO,KAAK,CAAC,CAAA;QAC7C,OAAO,MAAM;YAACA;YAAI,GAAG;SAAC;IACxB;IAEA,MAAM,CAAC,IAAI,IAAI,CAAA,GAAI;IACnB,MAAM,cAAc,CAAC;IACrB,IAAI,OAAO,OAAO,UAAU;QAC1B,OAAO;YAAC;YAAI,WAAW;SAAA;IACzB;IAEA,MAAM,OAAO,GAAG,KAAA,CAAM,GAAG,EAAE,GAAA,CAAI,CAAC,IAAM,CAAC,CAAC;IACxC,OAAO,KAAK,MAAA,KAAW,IAAI;QAAC,IAAA,CAAK,CAAC,CAAA;QAAG,WAAW;KAAA,GAAI;QAAC;QAAM,WAAW;KAAA;AACxE;AAGA,IAAO,yBAAQ;IAAE;IAAO;IAAO;AAAI;AAInC,IAAM,eAAe,CAAC,IAAe,KAAK,GAAA,CAAI,CAAC,IAAI,KAAK,GAAA,CAAI,CAAC,IAAK,MAAM;AAExE,SAAS,MAAM,CAAC,IAAI,IAAI,CAAA,EAAuC;IAC7D,MAAM,QAAQ,MAAM,OAAA,CAAQ,EAAE,IAAI,GAAG,MAAA,CAAO,CAAC,GAAG,IAAM,IAAI,GAAG,CAAC,IAAI;IAClE,MAAM,QAAQ;IACd,IAAI,UAAU,KAAK,UAAU,GAAG;QAC9B,OAAO;IACT;IAEA,MAAM,OAAO,MAAM,OAAA,CAAQ,EAAE,IAAI,GAAG,GAAG,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA,EAAI,IAAI,EAAA,GAAK,GAAG,EAAE,CAAA,CAAA,EAAI,IAAI,EAAA;IAC1E,MAAM,WAAW,MAAM,OAAA,CAAQ,EAAE,IAAI,KAAK,CAAC,CAAA;IAC3C,MAAM,OACJ,UAAU,KAAK,UAAU,IACrB,WACA,UAAU,KAAK,QAAQ,MAAM,IAC3B,aACA,aAAa,KAAK,IAChB,cACA;IAEV,OAAO;QACL,OAAO;QACP;QACA;QACA;QACA;QACA;IACF;AACF","debugId":null}},
    {"offset": {"line": 3990, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/voice-leading/index.ts"],"sourcesContent":["import Note from \"@tonaljs/note\";\n\n// A function that decides which of a set of voicings is picked as a follow up to lastVoicing.\nexport declare type VoiceLeadingFunction = (\n  voicings: string[][],\n  lastVoicing: string[],\n) => string[];\n\nexport const topNoteDiff: VoiceLeadingFunction = (voicings, lastVoicing) => {\n  if (!lastVoicing || !lastVoicing.length) {\n    return voicings[0];\n  }\n  const topNoteMidi = (voicing: string[]) =>\n    Note.midi(voicing[voicing.length - 1]) || 0;\n  const diff = (voicing: string[]) =>\n    Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\n  return voicings.sort((a, b) => diff(a) - diff(b))[0];\n};\n\n/** @deprecated */\nexport default {\n  topNoteDiff,\n};\n"],"names":[],"mappings":";;;;;;;AAAA,OAAO,UAAU;;AAQV,IAAM,cAAoC,CAAC,UAAU,gBAAgB;IAC1E,IAAI,CAAC,eAAe,CAAC,YAAY,MAAA,EAAQ;QACvC,OAAO,QAAA,CAAS,CAAC,CAAA;IACnB;IACA,MAAM,cAAc,CAAC,UACnB,8JAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,QAAQ,MAAA,GAAS,CAAC,CAAC,KAAK;IAC5C,MAAM,OAAO,CAAC,UACZ,KAAK,GAAA,CAAI,YAAY,WAAW,IAAI,YAAY,OAAO,CAAC;IAC1D,OAAO,SAAS,IAAA,CAAK,CAAC,GAAG,IAAM,KAAK,CAAC,IAAI,KAAK,CAAC,CAAC,CAAA,CAAE,CAAC,CAAA;AACrD;AAGA,IAAO,gBAAQ;IACb;AACF","debugId":null}},
    {"offset": {"line": 4016, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/voicing-dictionary/index.ts","file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/voicing-dictionary/data.ts"],"sourcesContent":["import Chord from \"@tonaljs/chord\";\nimport { all, lefthand, triads, VoicingDictionary } from \"./data\";\nexport { all, lefthand, triads } from \"./data\";\n\nexport const defaultDictionary: VoicingDictionary = lefthand;\n\nexport function lookup(\n  symbol: string,\n  dictionary = defaultDictionary,\n): string[] | undefined {\n  if (dictionary[symbol]) {\n    return dictionary[symbol];\n  }\n  const { aliases } = Chord.get(\"C\" + symbol);\n  // TODO: find other way to get aliases of symbol\n  const match =\n    Object.keys(dictionary).find((_symbol) => aliases.includes(_symbol)) || \"\";\n  if (match !== undefined) {\n    return dictionary[match];\n  }\n  return undefined;\n}\n\n/** @deprecated */\nexport default {\n  lookup,\n  lefthand,\n  triads,\n  all,\n  defaultDictionary,\n};\n","export type VoicingDictionary = { [symbol: string]: string[] };\n\nexport const triads: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n};\nexport const lefthand: VoicingDictionary = {\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\nexport const all: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,OAAO,WAAW;;;ACEX,IAAM,SAA4B;IACvC,GAAG;QAAC;QAAY;QAAY,WAAW;KAAA;IACvC,GAAG;QAAC;QAAY;QAAY,WAAW;KAAA;IACvC,GAAG;QAAC;QAAY;QAAY,WAAW;KAAA;IACvC,KAAK;QAAC;QAAY;QAAY,WAAW;KAAA;AAC3C;AACO,IAAM,WAA8B;IACzC,IAAI;QAAC;QAAe,eAAe;KAAA;IACnC,KAAK;QAAC;QAAe,eAAe;KAAA;IACpC,MAAM;QAAC;QAAe,eAAe;KAAA;IACrC,MAAM;QAAC,aAAa;KAAA;IACpB,MAAM;QAAC;QAAe,eAAe;KAAA;IACrC,OAAO;QAAC;QAAe,eAAe;KAAA;IAAA,WAAA;IACtC,QAAQ;QAAC;QAAe,eAAe;KAAA;IAAA,WAAA;IACvC,IAAI;QAAC;QAAe,cAAc;KAAA;IAClC,QAAQ;QAAC,eAAe;KAAA;IACxB,OAAO;QAAC,UAAU;KAAA;IAClB,KAAK;QAAC;QAAe,eAAe;KAAA;IACpC,IAAI;QAAC;QAAe,eAAe;KAAA;AACrC;AACO,IAAM,MAAyB;IACpC,GAAG;QAAC;QAAY;QAAY,WAAW;KAAA;IACvC,GAAG;QAAC;QAAY;QAAY,WAAW;KAAA;IACvC,GAAG;QAAC;QAAY;QAAY,WAAW;KAAA;IACvC,KAAK;QAAC;QAAY;QAAY,WAAW;KAAA;IACzC,IAAI;QAAC;QAAe,eAAe;KAAA;IACnC,KAAK;QAAC;QAAe,eAAe;KAAA;IACpC,MAAM;QAAC;QAAe,eAAe;KAAA;IACrC,MAAM;QAAC,aAAa;KAAA;IACpB,MAAM;QAAC;QAAe,eAAe;KAAA;IACrC,OAAO;QAAC;QAAe,eAAe;KAAA;IAAA,WAAA;IACtC,QAAQ;QAAC;QAAe,eAAe;KAAA;IAAA,WAAA;IACvC,IAAI;QAAC;QAAe,cAAc;KAAA;IAClC,QAAQ;QAAC,eAAe;KAAA;IACxB,OAAO;QAAC,UAAU;KAAA;IAClB,KAAK;QAAC;QAAe,eAAe;KAAA;IACpC,IAAI;QAAC;QAAe,eAAe;KAAA;AACrC;;ADnCO,IAAM,oBAAuC;AAE7C,SAAS,OACd,MAAA,EACA,aAAa,iBAAA,EACS;IACtB,IAAI,UAAA,CAAW,MAAM,CAAA,EAAG;QACtB,OAAO,UAAA,CAAW,MAAM,CAAA;IAC1B;IACA,MAAM,EAAE,OAAA,CAAQ,CAAA,GAAI,+KAAA,CAAM,GAAA,CAAI,MAAM,MAAM;IAE1C,MAAM,QACJ,OAAO,IAAA,CAAK,UAAU,EAAE,IAAA,CAAK,CAAC,UAAY,QAAQ,QAAA,CAAS,OAAO,CAAC,KAAK;IAC1E,IAAI,UAAU,KAAA,GAAW;QACvB,OAAO,UAAA,CAAW,KAAK,CAAA;IACzB;IACA,OAAO,KAAA;AACT;AAGA,IAAO,gBAAQ;IACb;IACA;IACA;IACA;IACA;AACF","debugId":null}},
    {"offset": {"line": 4200, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/voicing/index.ts"],"sourcesContent":["import Chord from \"@tonaljs/chord\";\nimport Interval from \"@tonaljs/interval\";\nimport Note from \"@tonaljs/note\";\nimport Range from \"@tonaljs/range\";\nimport VoiceLeading from \"@tonaljs/voice-leading\";\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\n\nconst defaultRange = [\"C3\", \"C5\"];\nconst defaultDictionary = VoicingDictionary.all;\nconst defaultVoiceLeading = VoiceLeading.topNoteDiff;\n\nexport function get(\n  chord: string,\n  range: string[] = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const voicings = search(chord, range, dictionary);\n  if (!lastVoicing || !lastVoicing.length) {\n    // notes = voicings[Math.ceil(voicings.length / 2)]; // pick middle voicing..\n    return voicings[0]; // pick lowest voicing..\n  } else {\n    // calculates the distance between the last note and the given voicings top note\n    // sort voicings with differ\n    return voiceLeading(voicings, lastVoicing);\n  }\n}\n\nexport function search(\n  chord: string,\n  range = defaultRange,\n  dictionary = VoicingDictionary.triads,\n): string[][] {\n  const [tonic, symbol] = Chord.tokenize(chord);\n  const sets = VoicingDictionary.lookup(symbol, dictionary);\n  // find equivalent symbol that is used as a key in dictionary:\n  if (!sets) {\n    return [];\n  }\n  // resolve array of interval arrays for the wanted symbol\n  const voicings = sets.map((intervals) => intervals.split(\" \"));\n  const notesInRange = Range.chromatic(range); // gives array of notes inside range\n  return voicings.reduce((voiced: string[][], voicing: string[]) => {\n    // transpose intervals relative to first interval (e.g. 3m 5P > 1P 3M)\n    const relativeIntervals = voicing.map(\n      (interval) => Interval.subtract(interval, voicing[0]) || \"\",\n    );\n    // get enharmonic correct pitch class the bottom note\n    const bottomPitchClass = Note.transpose(tonic, voicing[0]);\n    // get all possible start notes for voicing\n    const starts = notesInRange\n      // only get the start notes:\n      .filter((note) => Note.chroma(note) === Note.chroma(bottomPitchClass))\n      // filter out start notes that will overshoot the top end of the range\n      .filter(\n        (note) =>\n          (Note.midi(\n            Note.transpose(\n              note,\n              relativeIntervals[relativeIntervals.length - 1],\n            ),\n          ) || 0) <= (Note.midi(range[1]) || 0),\n      )\n      // replace Range.chromatic notes with the correct enharmonic equivalents\n      .map((note) => Note.enharmonic(note, bottomPitchClass));\n    // render one voicing for each start note\n    const notes = starts.map((start) =>\n      relativeIntervals.map((interval) => Note.transpose(start, interval)),\n    );\n    return voiced.concat(notes);\n  }, []);\n}\n\nexport function sequence(\n  chords: string[],\n  range = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const { voicings } = chords.reduce<{\n    voicings: string[][];\n    lastVoicing: string[] | undefined;\n  }>(\n    ({ voicings, lastVoicing }, chord) => {\n      const voicing = get(chord, range, dictionary, voiceLeading, lastVoicing);\n      lastVoicing = voicing;\n      voicings.push(voicing);\n      return { voicings, lastVoicing };\n    },\n    { voicings: [], lastVoicing },\n  );\n  return voicings;\n}\n\n/** @deprecated */\nexport default {\n  get,\n  search,\n  sequence,\n};\n"],"names":["voicings","lastVoicing"],"mappings":";;;;;;;;;;;AAAA,OAAO,WAAW;AAClB,OAAO,cAAc;AACrB,OAAO,UAAU;AACjB,OAAO,WAAW;AAClB,OAAO,kBAAkB;AACzB,OAAO,uBAAuB;;;;;;;AAE9B,IAAM,eAAe;IAAC;IAAM,IAAI;CAAA;AAChC,IAAM,oBAAoB,+KAAA,CAAkB,GAAA;AAC5C,IAAM,sBAAsB,0KAAA,CAAa,WAAA;AAElC,SAAS,IACd,KAAA,EACA,QAAkB,YAAA,EAClB,aAAa,iBAAA,EACb,eAAe,mBAAA,EACf,WAAA,EACA;IACA,MAAM,WAAW,OAAO,OAAO,OAAO,UAAU;IAChD,IAAI,CAAC,eAAe,CAAC,YAAY,MAAA,EAAQ;QAEvC,OAAO,QAAA,CAAS,CAAC,CAAA;IACnB,OAAO;QAGL,OAAO,aAAa,UAAU,WAAW;IAC3C;AACF;AAEO,SAAS,OACd,KAAA,EACA,QAAQ,YAAA,EACR,aAAa,+KAAA,CAAkB,MAAA,EACnB;IACZ,MAAM,CAAC,OAAO,MAAM,CAAA,GAAI,+KAAA,CAAM,QAAA,CAAS,KAAK;IAC5C,MAAM,OAAO,+KAAA,CAAkB,MAAA,CAAO,QAAQ,UAAU;IAExD,IAAI,CAAC,MAAM;QACT,OAAO,CAAC,CAAA;IACV;IAEA,MAAM,WAAW,KAAK,GAAA,CAAI,CAAC,YAAc,UAAU,KAAA,CAAM,GAAG,CAAC;IAC7D,MAAM,eAAe,+JAAA,CAAM,SAAA,CAAU,KAAK;IAC1C,OAAO,SAAS,MAAA,CAAO,CAAC,QAAoB,YAAsB;QAEhE,MAAM,oBAAoB,QAAQ,GAAA,CAChC,CAAC,WAAa,kKAAA,CAAS,QAAA,CAAS,UAAU,OAAA,CAAQ,CAAC,CAAC,KAAK;QAG3D,MAAM,mBAAmB,8JAAA,CAAK,SAAA,CAAU,OAAO,OAAA,CAAQ,CAAC,CAAC;QAEzD,MAAM,SAAS,aAEZ,MAAA,CAAO,CAAC,OAAS,8JAAA,CAAK,MAAA,CAAO,IAAI,MAAM,8JAAA,CAAK,MAAA,CAAO,gBAAgB,CAAC,EAEpE,MAAA,CACC,CAAC,OAAA,CACE,8JAAA,CAAK,IAAA,CACJ,8JAAA,CAAK,SAAA,CACH,MACA,iBAAA,CAAkB,kBAAkB,MAAA,GAAS,CAAC,CAAA,MAE7C,CAAA,KAAA,CAAO,8JAAA,CAAK,IAAA,CAAK,KAAA,CAAM,CAAC,CAAC,KAAK,CAAA,GAGtC,GAAA,CAAI,CAAC,OAAS,8JAAA,CAAK,UAAA,CAAW,MAAM,gBAAgB,CAAC;QAExD,MAAM,QAAQ,OAAO,GAAA,CAAI,CAAC,QACxB,kBAAkB,GAAA,CAAI,CAAC,WAAa,8JAAA,CAAK,SAAA,CAAU,OAAO,QAAQ,CAAC;QAErE,OAAO,OAAO,MAAA,CAAO,KAAK;IAC5B,GAAG,CAAC,CAAC;AACP;AAEO,SAAS,SACd,MAAA,EACA,QAAQ,YAAA,EACR,aAAa,iBAAA,EACb,eAAe,mBAAA,EACf,WAAA,EACA;IACA,MAAM,EAAE,QAAA,CAAS,CAAA,GAAI,OAAO,MAAA,CAI1B,CAAC,EAAE,UAAAA,SAAAA,EAAU,aAAAC,YAAAA,CAAY,CAAA,EAAG,UAAU;QACpC,MAAM,UAAU,IAAI,OAAO,OAAO,YAAY,cAAcA,YAAW;QACvEA,eAAc;QACdD,UAAS,IAAA,CAAK,OAAO;QACrB,OAAO;YAAE,UAAAA;YAAU,aAAAC;QAAY;IACjC,GACA;QAAE,UAAU,CAAC,CAAA;QAAG;IAAY;IAE9B,OAAO;AACT;AAGA,IAAO,gBAAQ;IACb;IACA;IACA;AACF","debugId":null}},
    {"offset": {"line": 4279, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/%40tonaljs/core/index.ts"],"sourcesContent":["import { isNamedPitch } from \"@tonaljs/pitch\";\n\nexport * from \"@tonaljs/pitch\";\nexport * from \"@tonaljs/pitch-distance\";\nexport * from \"@tonaljs/pitch-interval\";\nexport * from \"@tonaljs/pitch-note\";\n\nexport const fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport function deprecate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>,\n>(original: string, alternative: string, fn: ResultFn) {\n  return function (this: unknown, ...args: unknown[]): ReturnType<ResultFn> {\n    // tslint:disable-next-line\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\n    return fn.apply(this, args);\n  };\n}\n\nexport const isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\n"],"names":[],"mappings":";;;;;;;;;AAAA,SAAS,oBAAoB;AAG7B,cAAc;AACd,cAAc;AACd,cAAc;;;;;;AAEP,IAAM,UAAU,CAAC,GAAW,IAAc,MAAM,KAAK,GAAA,CAAI,CAAC,IAAI,CAAC,EAAE,IAAA,CAAK,CAAC;AAEvE,SAAS,UAGd,QAAA,EAAkB,WAAA,EAAqB,EAAA,EAAc;IACrD,OAAO,SAAA,GAA4B,IAAA,EAAuC;QAExE,QAAQ,IAAA,CAAK,GAAG,QAAQ,CAAA,oBAAA,EAAuB,WAAW,CAAA,CAAA,CAAG;QAC7D,OAAO,GAAG,KAAA,CAAM,IAAA,EAAM,IAAI;IAC5B;AACF;AAEO,IAAM,UAAU,UAAU,WAAW,gBAAgB,oKAAY","debugId":null}},
    {"offset": {"line": 4366, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/tonal/index.ts"],"sourcesContent":["import * as AbcNotation from \"@tonaljs/abc-notation\";\nimport * as Array from \"@tonaljs/array\";\nimport * as Chord from \"@tonaljs/chord\";\nimport * as ChordType from \"@tonaljs/chord-type\";\nimport * as Collection from \"@tonaljs/collection\";\nimport * as DurationValue from \"@tonaljs/duration-value\";\nimport * as Interval from \"@tonaljs/interval\";\nimport * as Key from \"@tonaljs/key\";\nimport * as Midi from \"@tonaljs/midi\";\nimport * as Mode from \"@tonaljs/mode\";\nimport * as Note from \"@tonaljs/note\";\nimport * as Pcset from \"@tonaljs/pcset\";\nimport * as Progression from \"@tonaljs/progression\";\nimport * as Range from \"@tonaljs/range\";\nimport * as RhythmPattern from \"@tonaljs/rhythm-pattern\";\nimport * as RomanNumeral from \"@tonaljs/roman-numeral\";\nimport * as Scale from \"@tonaljs/scale\";\nimport * as ScaleType from \"@tonaljs/scale-type\";\nimport * as TimeSignature from \"@tonaljs/time-signature\";\nimport * as VoiceLeading from \"@tonaljs/voice-leading\";\nimport * as Voicing from \"@tonaljs/voicing\";\nimport * as VoicingDictionary from \"@tonaljs/voicing-dictionary\";\n\nexport * from \"@tonaljs/core\";\n\n// deprecated (backwards compatibility)\nimport * as Core from \"@tonaljs/core\";\n/** @deprecated */\nconst Tonal = Core;\n/** @deprecated */\nconst PcSet = Pcset;\n/** @deprecated */\nconst ChordDictionary = ChordType;\n/** @deprecated */\nconst ScaleDictionary = ScaleType;\n\nexport {\n  AbcNotation,\n  Array,\n  Chord,\n  ChordDictionary,\n  ChordType,\n  Collection,\n  Core,\n  DurationValue,\n  Interval,\n  Key,\n  Midi,\n  Mode,\n  Note,\n  PcSet,\n  Pcset,\n  Progression,\n  Range,\n  RhythmPattern,\n  RomanNumeral,\n  Scale,\n  ScaleDictionary,\n  ScaleType,\n  TimeSignature,\n  Tonal,\n  VoiceLeading,\n  Voicing,\n  VoicingDictionary,\n};\n"],"names":[],"mappings":";;;;;;;;;;;AAAA,YAAY,iBAAiB;AAC7B,YAAY,WAAW;;AACvB,YAAY,WAAW;AACvB,YAAY,eAAe;AAC3B,YAAY,gBAAgB;AAC5B,YAAY,mBAAmB;AAC/B,YAAY,cAAc;AAC1B,YAAY,SAAS;AACrB,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB,YAAY,iBAAiB;AAC7B,YAAY,WAAW;AACvB,YAAY,mBAAmB;AAC/B,YAAY,kBAAkB;AAC9B,YAAY,WAAW;AACvB,YAAY,eAAe;AAC3B,YAAY,mBAAmB;AAC/B,YAAY,kBAAkB;AAC9B,YAAY,aAAa;AACzB,YAAY,uBAAuB;AAEnC,cAAc;AAGd,YAAY,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;AAEtB,IAAM,QAAQ;AAEd,IAAM,QAAQ;AAEd,IAAM,kBAAkB;AAExB,IAAM,kBAAkB","debugId":null}},
    {"offset": {"line": 4463, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/zustand/esm/vanilla.mjs"],"sourcesContent":["const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\" || nextState === null) ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const getInitialState = () => initialState;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const api = { setState, getState, getInitialState, subscribe };\n  const initialState = state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = ((createState) => createState ? createStoreImpl(createState) : createStoreImpl);\n\nexport { createStore };\n"],"names":[],"mappings":";;;;AAAA,MAAM,kBAAkB,CAAC;IACvB,IAAI;IACJ,MAAM,YAAY,aAAa,GAAG,IAAI;IACtC,MAAM,WAAW,CAAC,SAAS;QACzB,MAAM,YAAY,OAAO,YAAY,aAAa,QAAQ,SAAS;QACnE,IAAI,CAAC,OAAO,EAAE,CAAC,WAAW,QAAQ;YAChC,MAAM,gBAAgB;YACtB,QAAQ,CAAC,WAAW,OAAO,UAAU,OAAO,cAAc,YAAY,cAAc,IAAI,IAAI,YAAY,OAAO,MAAM,CAAC,CAAC,GAAG,OAAO;YACjI,UAAU,OAAO,CAAC,CAAC,WAAa,SAAS,OAAO;QAClD;IACF;IACA,MAAM,WAAW,IAAM;IACvB,MAAM,kBAAkB,IAAM;IAC9B,MAAM,YAAY,CAAC;QACjB,UAAU,GAAG,CAAC;QACd,OAAO,IAAM,UAAU,MAAM,CAAC;IAChC;IACA,MAAM,MAAM;QAAE;QAAU;QAAU;QAAiB;IAAU;IAC7D,MAAM,eAAe,QAAQ,YAAY,UAAU,UAAU;IAC7D,OAAO;AACT;AACA,MAAM,cAAe,CAAC,cAAgB,cAAc,gBAAgB,eAAe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 4499, "column": 0}, "map": {"version":3,"sources":["file:///Users/nh/App/OtoTheory/ototheory-web/node_modules/zustand/esm/react.mjs"],"sourcesContent":["import React from 'react';\nimport { createStore } from 'zustand/vanilla';\n\nconst identity = (arg) => arg;\nfunction useStore(api, selector = identity) {\n  const slice = React.useSyncExternalStore(\n    api.subscribe,\n    React.useCallback(() => selector(api.getState()), [api, selector]),\n    React.useCallback(() => selector(api.getInitialState()), [api, selector])\n  );\n  React.useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  const api = createStore(createState);\n  const useBoundStore = (selector) => useStore(api, selector);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = ((createState) => createState ? createImpl(createState) : createImpl);\n\nexport { create, useStore };\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,WAAW,CAAC,MAAQ;AAC1B,SAAS,SAAS,GAAG,EAAE,WAAW,QAAQ;IACxC,MAAM,QAAQ,gNAAK,CAAC,oBAAoB,CACtC,IAAI,SAAS,EACb,gNAAK,CAAC,WAAW,CAAC,IAAM,SAAS,IAAI,QAAQ,KAAK;QAAC;QAAK;KAAS,GACjE,gNAAK,CAAC,WAAW,CAAC,IAAM,SAAS,IAAI,eAAe,KAAK;QAAC;QAAK;KAAS;IAE1E,gNAAK,CAAC,aAAa,CAAC;IACpB,OAAO;AACT;AACA,MAAM,aAAa,CAAC;IAClB,MAAM,MAAM,IAAA,yJAAW,EAAC;IACxB,MAAM,gBAAgB,CAAC,WAAa,SAAS,KAAK;IAClD,OAAO,MAAM,CAAC,eAAe;IAC7B,OAAO;AACT;AACA,MAAM,SAAU,CAAC,cAAgB,cAAc,WAAW,eAAe","ignoreList":[0],"debugId":null}}]
}